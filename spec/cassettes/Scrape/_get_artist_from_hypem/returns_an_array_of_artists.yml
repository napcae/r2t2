---
http_interactions:
- request:
    method: get
    uri: https://hypem.com/napcae
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.14.0
      Date:
      - Thu, 09 Apr 2020 17:34:56 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Keep-Alive:
      - timeout=10
      Access-Control-Allow-Origin:
      - https://www.google.com https://pagead2.googlesyndication.com https://googleads.g.doubleclick.net
        https://securepubads.g.doubleclick.net https://nym1-ib.adnxs.com https://ssc.33across.com/api/exchange
      Set-Cookie:
      - AUTH=03%3Afc59e01e987f7e62e54e1961738a9ad2%3A1586453696%3A1494103897%3A01-DE;
        expires=Sat, 05-Apr-2036 17:34:56 GMT; Max-Age=504576000; path=/; domain=hypem.com
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en">
<head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# hype-machine: http://ogp.me/ns/fb/hype-machine#">

    <title>napcae's favorite tracks / Hype Machine</title>

    <meta property="fb:app_id" content="149376585092829" />
    <meta property="og:url" content="https://hypem.com/napcae" />
    <meta property="og:description" content="The place for the best new music.  Every day, thousands of people around the world write about music they love &mdash; and it all ends up here." />
    <meta property="og:title" content="napcae&#039;s favorite tracks / Hype Machine" />
    <meta property="og:image" content="https://static.hypem.com/images/share-logo-wide.png" />
    <meta property="og:site_name" content="Hype Machine" />
    <meta property="twitter:image" content="https://static.hypem.com/images/share-logo-square.png" />
    <meta property="twitter:card" content="summary" />
    <meta name="viewport" content="width=320, maximum-scale=2" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="verify-v1" content="qwbaObdzdZWrdu9G4KvAUGD+eLPZj38HYoLP/rhlBYo=" />
    <meta name="title" content="napcae&#039;s favorite tracks / Hype Machine" />
    <meta name="description" content="The place for the best new music.  Every day, thousands of people around the world write about music they love &mdash; and it all ends up here." />
    <meta name="robots" content="noindex" />
    
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    
    
    <link rel="icon" href="https://static.hypem.com/favicon.png" type="image/x-icon"/>

    <link rel="shortcut icon" href="https://static.hypem.com/favicon.png" type="image/x-icon"/>

        <link rel="apple-touch-icon" href="/images/touch-icon-iphone.png"/>
    <link rel="apple-touch-icon" sizes="76x76" href="/images/touch-icon-ipad.png"/>
    <link rel="apple-touch-icon" sizes="114x114" href="/images/touch-icon-iphone4.png"/>
    <link rel="apple-touch-icon" sizes="120x120" href="/images/touch-icon-iphone-retina.png"/>
    <link rel="apple-touch-icon" sizes="152x152" href="/images/touch-icon-ipad-retina.png"/>
    <link rel="apple-touch-icon" sizes="167x167" href="/images/touch-icon-ipad-pro.png"/>
    <link rel="apple-touch-icon" sizes="180x180" href="/images/touch-icon-iphone-6-plus.png"/>
    <link rel="search" type="application/opensearchdescription+xml" href="/hypemachine.xml" title="Hype Machine"/>
    
        <link rel="stylesheet" type="text/css" media="screen"
          href="https://static.hypem.com/rev_1585942896/css/stylish.css"/>

            <link rel="alternate" type="application/rss+xml" title="RSS"
              href="http://hypem.com/feed/loved/napcae/1/feed.xml" />
    <!-- self-applied takeovers -->
    
    <!-- main scripts-->
    <script src="https://static.hypem.com/rev_1492790219/js/libs/jquery-3.2.1.min.js"></script>
<script src="https://static.hypem.com/rev_1585942900/js/hype_functions_min.js"></script>

<!-- arc.io -->
<script async src="https://arc.io/widget.js?U9h7C58878d94vh1G4w7XN"></script>

<script>

(function($) {

    window.takeovers = []; /* this is included prior to header_scripts.php, in header.php */

    /* utility jQuery extensions */
    jQuery.cachedScript = function(url, options) {
        options = $.extend(options || {}, {
            dataType: "script",
            cache: true,
            url: url
        });

        return jQuery.ajax(options);
    };

    /*
        INIT User-Agent info
        This should be reworked eventually, but we do need to sometimes know, is_ios, is_android, and etc.
    */
    if (navigator.userAgent.match(/(iPad|iPhone|iPod)/i)) { ua_info.is_ios = true; } 
    else if (navigator.userAgent.match(/android/i)) { ua_info.is_android = true; }
    else if (navigator.userAgent.match(/playbook/i)) { ua_info.is_playbook = true; } 
    else if (navigator.userAgent.match(/\(BB10;/i)) { ua_info.is_blackberry = true; }
    else if (navigator.userAgent.match(/Windows Phone/i)) { ua_info.is_win_phone = true; } 
    else if (navigator.userAgent.match(/Mozilla\/5\.0 \(Mobile; rv:/) ) { ua_info.is_ff_os = true; } 

    if (navigator.userAgent.match(/android 2\.1/i) ) { ua_info.is_android_old_flash = true; } 
    else { ua_info.is_android_old_flash = false; }

    if (navigator.userAgent.match(/msie (5|6|7|8)/i)) { ua_info.is_old_ie = true; } 
    else { ua_info.is_old_ie = false; }

    if ( navigator.userAgent.match(/version\//i) 
         && navigator.userAgent.match(/safari\//i) ) {
        ua_info.is_safari = true;
    } else {
        ua_info.is_safari = false;
    }

    if ( navigator.userAgent.match(/chromium\//i) ) { ua_info.is_chromium = true; } 
    else { ua_info.is_chromium = false; }

    if ( navigator.userAgent.match(/chrome\/(25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40)/i) ) {
        ua_info.is_bad_chrome = true;
    } else {
        ua_info.is_bad_chrome = false;
    }

    if(
        ua_info.is_ios ||
        ua_info.is_playbook ||
        ua_info.is_android ||
        navigator.userAgent.match(/Mozilla\/5\.0 \(Mobile; rv:/) || /* Firefox Mobile OS */ 
        navigator.userAgent.match(/blackberry/i) ||
        navigator.userAgent.match(/palm/i) ||
        navigator.userAgent.match(/sony/i) ||
        navigator.userAgent.match(/symbian/i) ||
        navigator.userAgent.match(/nokia/i) ||
        navigator.userAgent.match(/samsung/i) ||
        navigator.userAgent.match(/mobile/i) ||
        navigator.userAgent.match(/windows ce/i) ||
        navigator.userAgent.match(/epoc/i) ||
        navigator.userAgent.match(/opera mini/i) ||
        navigator.userAgent.match(/nitro/i) ||
        navigator.userAgent.match(/j2me/i) ||
        navigator.userAgent.match(/midp\-/i) ||
        navigator.userAgent.match(/cldc\-/i) ||
        navigator.userAgent.match(/netfront/i) ||
        navigator.userAgent.match(/mot/i) ||
        navigator.userAgent.match(/up\.browser/i) ||
        navigator.userAgent.match(/up\.link/i) ||
        navigator.userAgent.match(/audiovox/i) ||
        navigator.userAgent.match(/ericsson/i) ||
        navigator.userAgent.match(/panasonic/i) ||
        navigator.userAgent.match(/philips/i) ||
        navigator.userAgent.match(/sanyo/i) ||
        navigator.userAgent.match(/sharp/i) ||
        navigator.userAgent.match(/sie-/i) ||
        navigator.userAgent.match(/portalmmm/i) ||
        navigator.userAgent.match(/blazer/i) ||
        navigator.userAgent.match(/avantgo/i) ||
        navigator.userAgent.match(/danger/i) ||
        navigator.userAgent.match(/series60/i) ||
        navigator.userAgent.match(/palmsource/i) ||
        navigator.userAgent.match(/pocketpc/i) ||
        navigator.userAgent.match(/smartphone/i) ||
        navigator.userAgent.match(/rover/i) ||
        navigator.userAgent.match(/ipaq/i) ||
        navigator.userAgent.match(/au\-mic/i) ||
        navigator.userAgent.match(/alcatel/i) ||
        navigator.userAgent.match(/ericy/i) ||
        navigator.userAgent.match(/up\.link/i) ||
        navigator.userAgent.match(/vodafone/i) ||
        navigator.userAgent.match(/wap1\./i) ||
        navigator.userAgent.match(/wap2\./i)
    ) {
        ua_info.is_mobile = true;
    } else {
        ua_info.is_mobile = false;
    }

    /* disable mobile view for ipad, but not if it's via the MyPad app */
    if(navigator.userAgent.match(/iPad/) && !navigator.userAgent.match(/MyPad/)){
        ua_info.is_mobile = false;
    }

    ua_info.ua = navigator.userAgent;

    /*
    (function() {
        if(ua_info.is_mobile) {
            var head = document.getElementsByTagName('head')[0];
            var css_sheet = document.createElement('link');
            css_sheet.type = "text/css";
            css_sheet.rel = "stylesheet";
            css_sheet.id = "mobile_css";
            css_sheet.href = 'https://static.hypem.com/rev_1585942895/css/mobile.css';
            head.appendChild(css_sheet);
        }
    })();
    */

    static_http_server = "https://static.hypem.com";
    server_time = 1586453696;

    window.custom_css = [
    {
        match: /\/zeitgeist\/2007/,
            id: "css_zeitgeist07",
            href: "https://static.hypem.com/rev_1518129520/css/zeitgeist-2007.css"
    },
    {
        match: /\/zeitgeist\/2008/,
            id: "css_zeitgeist08",
            href: "https://static.hypem.com/rev_1518129520/css/zeitgeist-2008.css"
    },
    {
        match: /\/zeitgeist\/2009/,
            id: "css_zeitgeist09",
            href: "https://static.hypem.com/rev_1518129520/css/zeitgeist-2009.css"
    },
    {
        match: /\/zeitgeist\/2010/,
            id: "css_zeitgeist10",
            href: "https://static.hypem.com/rev_1518129520/css/zeitgeist-2010.css"
    },
    {
        match: /\/zeitgeist\/2011/,
            id: "css_zeitgeist11",
            href: "https://static.hypem.com/rev_1518129520/css/zeitgeist-2011.css"
    },
    {
        match: /\/zeitgeist\/2011\/artists/,
            id: "css_zeitgeist11_artists",
            href: "https://static.hypem.com/rev_1418235509/css/zeitgeist-2011-map-ui.css"
    },
    {
        match: /\/zeitgeist\/2012/,
            id: "css_zeitgeist12",
            href: "https://static.hypem.com/rev_1585942897/css/zeitgeist-2012.css"
    },
    {
        match: /\/zeitgeist\/2013/,
            id: "css_zeitgeist13",
            href: "https://static.hypem.com/rev_1585942897/css/zeitgeist-2013.css"
    },
    {
        match: /\/zeitgeist\/2014/,
            id: "css_zeitgeist14",
            href: "https://static.hypem.com/rev_1585942897/css/zeitgeist-2014.css"
    }, 
    {
        match: /\/zeitgeist\/2015/,
            id: "css_zeitgeist15",
            href: "https://static.hypem.com/rev_1585942898/css/zeitgeist-2015.css"
    }, 
    {
        match: /\/zeitgeist\/2016/,
            id: "css_zeitgeist16",
            href: "https://static.hypem.com/rev_1585942898/css/zeitgeist-2016.css"
    },
    {
        match: /\/zeitgeist\/2017/,
            id: "css_zeitgeist17",
            href: "https://static.hypem.com/rev_1585942898/css/zeitgeist-2017.css"
    },  
    {
        match: /\/zeitgeist\/2018/,
            id: "css_zeitgeist18",
            href: "https://static.hypem.com/rev_1585942898/css/zeitgeist-2018.css"
    },  
    {
        match: /\/zeitgeist\/2019/,
            id: "css_zeitgeist19",
            href: "https://static.hypem.com/rev_1585942898/css/zeitgeist-2019.css"
    },  
    {
        match: /\/hotel\/2014/,
            id: "css_sxsw2014_wrap",
            href: "https://static.hypem.com/rev_1585942896/css/sxsw-2014_wrap.css"
    }, 
    {
        match: /\/hotel\/2015/,
            id: "css_sxsw2015",
            href: "https://static.hypem.com/rev_1585942897/css/sxsw-2015.css"
    }, 
    {
        match: /\/hotel\/2016/,
            id: "css_sxsw2016",
            href: "https://static.hypem.com/rev_1585942897/css/sxsw-2016.css"
    }, 
    {
        match: /\/special\/ones-to-watch-2015-2/, /* http://hypem.com/special/ones-to-watch-2015-2 */
            id: "css_otw2015_2",
            href: "https://static.hypem.com/rev_1585942896/css/otw-2015_2.css"
    }, 
    { 
        match: /\/special\/moogfest-2016/, /* http://hypem.com/special/moogfest-2016 */
            id: "css_moogfest2016",
            href: "https://static.hypem.com/rev_1585942895/css/moogfest-2016.css"
    }, 
    { 
        match: /\/special\/moogfest-2016/, /* http://hypem.com/special/moogfest-2016 */
            id: "css_moogfest2016",
            href: "https://static.hypem.com/rev_1585942895/css/moogfest-2016.css"
    }, 
    { 
        match: /\/special\/form-2016/, /* http://hypem.com/special/form-2016 */
            id: "css_form2016",
            href: "https://static.hypem.com/rev_1585942895/css/form-2016.css"
    }, 
    { 
        match: /\/cmj2015/, /* http://hypem.com/cmj2015 */
            id: "css_cmj2015",
            href: "https://static.hypem.com/rev_1585942894/css/cmj-2015.css"
    }, 
    {
        match: /\/hotel\/video/,
            id: "css_baeble_video",
            href: "http://hypehotel.baeblemusic.com/fancybox/source/jquery.fancybox.css?v=2.0.6"
    },
    {
        match: /\/hotel\/mobile/,
            id: "css_tb_special",
            href: "https://static.hypem.com/rev_1335021536/css/tb-mobile-special.css"
    },
    {
        match: /\/spy/,
            id: "css_spy_map",
            href: "https://static.hypem.com/rev_1493874591/js/jquery-jvectormap-2.0.3/jquery-jvectormap-2.0.3.css"
    }
    ];

    


    /* Mini-scroll action to remove the location bar on iOS */
    if(ua_info.is_ios) {

        window.addEventListener("load",function() {

            /* timeout required for this to work, somehow */
            setTimeout(function(){
                window.scrollTo(0, 1); /* Hide the address bar! */
            }, 1000);

        });

    }
 

    /* load libs */
    /* global namespaces */
    var libs = {
        Base64 : 'https://static.hypem.com/rev_1320095547/js/base64.js',
        Waypoints : 'https://static.hypem.com/rev_1443595686/js/libs/jquery.waypoints.min.js',
        Lightbox : 'https://static.hypem.com/rev_1544208599/js/libs/jquery.lightbox.js' /* WARNING: not really a jquery plugin */
        //Lightbox : 'https://static.hypem.com/rev_1585942900/js/libs/jquery.lightbox_min.js' /* WARNING: not really a jquery plugin... */
    };
    var libs_loaded = [];
    for(var lib in libs){
        if(typeof window[lib] === 'undefined'){
            libs_loaded.push($.cachedScript(libs[lib]));
        }
    }

    /* namespaces under jQuery */
    var jquery_libs = {
        tooltip: 'https://static.hypem.com/rev_1585942900/js/libs/tooltip_min.js'
    };
    for(var jquery_lib in jquery_libs){
        if(!$.fn[jquery_lib]){
            libs_loaded.push($.cachedScript(jquery_libs[jquery_lib]));
        }
    }


    /* load and init soundmanager */
    $.cachedScript('https://static.hypem.com/rev_1543440594/js/soundmanagerv297a-20170601/script/soundmanager2-nodebug-jsmin.js')
        .then(init_soundmanager);

    if(is_hypem()) {
        $.cachedScript('https://static.hypem.com/rev_1585942900/js/libs/fingerprint_min.js')
        .then(init_fp);
    }
    
    $(document).ready(function() { /* this attaches to outer document scope only and fires once per hard page reload */
        show_loading();

        activeList = get_current_rel_url();

        init_selectors();

        attach_clicks();
        attach_clicks_player_bar();

        init_visibility_check();

        if(!ua_info.is_mobile) {
            $(window).scroll(sticky_relocate);
            sticky_relocate();
        }

        /* wait for user menu callback to return with user info */
        $.when(load_user_menu()).done(function(){
            page_url_state_init();
        }); 

    }); 

    })(jQuery); 

</script>

    <!-- facebook autoshare setup-->
    <script>
        window.facebook_auto_share = false;
        window.facebook_authed = false;
            </script>
</head>

<body id="profile" class="">

<div id="about-site">
The best place to find new music on the web. Every day, thousands of people around the world write about music they love — and it all ends up here.
</div>

<div id="sticky-anchor"></div>

<div id="header" data-header-type="standard" >

    <div id="header-inner" class="content-centered">

        <a id="logo-txt" class="logo-txt icon-logo" href="/latest" title="Hype Machine"></a>

        <a id="header-view-in-app" title="View in app" href="hypem://">Open in App &rarr;</a>

        <ul class="menu">

            <li id="menu-item-latest" ><a href="/latest" title="Latest music">Latest</a>

                            </li>

            <li id="menu-item-popular" ><a href="/popular" title="Popular tracks">Popular</a>
            </li>

            <li id="menu-item-stack"><a href="/stack" title="Stack newsletter"><span>&#x2709;</span>&nbsp;&nbsp;Stack</a></li>
            <li id="menu-item-album"><a href="/albums" title="Featured albums">Albums</a></li>
            
                        <li id="menu-item-supportus"><a href="https://hypem.com/support-us" title="Fund Hype Machine">Support us</a></li>
            
            <li id="menu-item-more"><a title="More"><b>&#9679; &#9679; &#9679;</b></a>
                <ul>
                    <li id="menu-item-mixes"><a href="/mixes" title="A collection of mixes from our newsletter">Good Mixes</a></li>
                    <li id="menu-item-reads"><a href="/reads" title="Music longreads from our newsletter">Good Reads</a></li>
                    <li id="menu-item-spy"><a href="/spy" title="View real-time activity on the site">Spy</a></li>
                    <li id="menu-item-directory"><a href="/sites" title="All the sites we index">Indexed Sites</a></li>
                    <li id="menu-item-zeitgeist"><a href="/zeitgeist/2019" title="Zeitgeist"><span style="color: red;">&#x2605;</span> Best of 2007-2019</a></li>
                    <li id="menu-item-merchtable"><a href="/merch-table" title="Merch Table">Merch Table</a></li>
                </ul>
            </li>

        </ul>
    
        <form id="search-form" action="/search" method="get" onSubmit="load_search(); return false;" name="searchform">

            <input name="q" type="text" id="q" value="Artist or Track" title="Artist or Track" class="clear-on-click"/>

            <input type="submit" id="g" value="Search"/>
            <a href="/random_search" id="shuf" class="icon-shuffle" onclick="load_random_search();return false;" title="Do the search shuffle"></a>

        </form>

        <div id="filter" class="user-menu"></div><!-- filter -->
    </div>

</div>

<div id="flash-message"></div>

<div id="player-loading"><span>LOADING</span></div>

<div id="player-container">

    <div id="yt-container"></div>

    <div id="player-inner" class="content-centered">

        <div id="player-page"></div>

        <div id="player-controls" class="haarp-fav-active">
            <a id="playerPrev" class="icon-previous"></a>
            <a id="playerPlay" class="play-ctrl haarp-play-ctrl icon-play"></a>
            <a id="playerFav" class="icon-heart haarp-fav-ctrl"></a>
            <a id="playerNext" class="icon-next"></a>
            <a id="playerRepeat" class="icon-repeat"></a>

            <div id="player-queue"></div>
            <div id="player-nowplaying"></div>

            <div id="player-timebar">
                <div id="player-time-position">0:00</div>
                <div id="player-time-total"></div>
                <div id="player-progress-outer">
                    <div id="player-progress-loading">&nbsp;</div>
                    <div id="player-progress-playing">&nbsp;</div>
                </div>
                <div id="player-volume-container">
                    <div id="player-volume-mute" class="icon-speaker"><span>&nbsp;</span>
                    </div>
                    <div id="player-volume-outer">
                        <div id="player-volume-ctrl">&nbsp;</div>
                    </div>
                </div>
            </div> <!-- player-timebar -->
            
        </div><!-- player-controls-->

    </div><!-- player-inner -->

</div><!-- player-container -->
<div id="content-wrapper">

    
        <script>
        jQuery('body').attr('id', 'profile'); // apply appropriate css styles by changing body id
        window.displayList['url'] = document.location.href; // FIXME: should be rel?
    </script>
    
    <div id="container">

        
                    <div class="ad-breakout"><div class="ad-wrapper ad-leaderboard" id="ad-leaderboard"></div></div>
                <div id="content" class="content-centered"><!-- oh look you are reading comments. well, we love you.  -->
<div id="content-right" >
    <div class="section social-summary">

        <div class="summary-item">
            <div class="summary-title">Apps</div>
            <div class="summary-content">
                <a class="icon-apple" href="/iphone"></a>
                <a class="icon-android" href="/android"></a>
            </div>
        </div>  
        <div class="summary-item">
            <div class="summary-title">Social</div>
            <div class="summary-content">
            		<a class="icon-instagram" href="https://instagram.com/hypem"></a>
            		<a class="icon-twitter" href="https://twitter.com/hypem"></a>
                <a class="icon-facebook" href="https://facebook.com/hypem"></a>
                <a class="icon-spotify" href="https://open.spotify.com/user/hypem"></a>
                <a class="icon-sc" href="https://soundcloud.com/hypem"></a>        
            </div>
        </div>
        <div class="summary-item">
            <div class="summary-other"><a href="/about">About/FAQ</a> &bull; <a href="/contact">Contact</a> &bull; <a href="http://merch.hypem.com">Tees &amp; Merch</a></div>
            <div style="padding-top: 4px;"><a href="https://hypem.com/support-us?e=sidebar" style="text-decoration: none;"><div class="supportus-button">Join 3,604 supporters.<br/>Fund Hype Machine &rarr;</div></a></div>       
        </div>
    </div>
    <div id="user-rec" style="">Loading listener suggestions...</div>
    <script language="javascript" type="text/javascript">
        $("#user-rec").load('/inc/serve_friend_rec?type=fav&arg=napcae');
    </script>
            <div class="ad-wrapper ad-rectangle-modern ad-rectangleA" id="ad-rectangleA"></div>    <div class="section" style="margin-bottom:10px;">

        <a href="/stack" style="margin-left: -10px;">
            <img src="https://static.hypem.com/rev_1420743250/images/stack_sidebar.svg" alt="Stack logo" />
        </a>

        <p style="margin-top:-7px;">
        Once a week, Stack delivers a mix of the most interesting new music on the web, handpicked by the Hype Machine team. <a href="/stack/">Here's a recent mix</a>.
        </p>

                <!-- Begin MailChimp Signup Form -->
        <div id="mc_embed_signup" style="padding: 5px 0px;font-size:13px;">
            <form id="mc-embedded-subscribe-form" class="validate" action="https://hypem.us7.list-manage.com/subscribe/post?u=e9e17a06a5cc8fcbf10aaddf3&amp;id=28a82e4150" method="post" name="mc-embedded-subscribe-form" novalidate="" target="_blank">
                <div class="mc-field-group" style="float:left;">
                    <label for="mce-EMAIL" style="margin-right:5px;font-size:13px;">Email </label>
                    <input id="mce-EMAIL" class="required email" style="width: 140px;font-size:13px;" name="EMAIL" type="email" value="" />
                    <input type="hidden" name="SIGNUP_SRC" id="SIGNUP_SRC" value="site_sidebar" />
                </div>
            
                <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
                <div style="position: absolute; left: -5000px;"><input tabindex="-1" name="b_e9e17a06a5cc8fcbf10aaddf3_28a82e4150" type="text" value="" /></div>

                <input id="mc-embedded-subscribe" class="button" style="font-size:13px;background:#ddd;" name="subscribe" type="submit" value="Subscribe" />
            </form>
        </div><!--End mc_embed_signup-->
            </div>
	<div id="tour-dates" class="section">
	
<!--<h3><a href="http://songkick.com" style="color:#f80046;">Songkick</a> &bull; Concerts</h3>-->
<h3>CONCERTS <a href="http://songkick.com" style="color:#f80046;float:right;">Songkick</a></h3>

<p>No related shows in Germany</p>
<ul>
		<li>
		<a onclick="if (this.innerHTML.match(/VIEW/)) { jQuery('#events-remote').slideDown(300); this.innerHTML='HIDE  68 CONCERTS'; } 
		else { jQuery('#events-remote').slideUp(300); this.innerHTML='VIEW ALL 68 CONCERTS &darr;'; } return false;" href="">VIEW 68 CONCERTS  &darr; <span class="city">WORLDWIDE</span></a>
</li>
</ul>
		<ul id="events-remote" style="display:none">
				<li><a target="_blank" href="http://www.songkick.com/concerts/39409109-big-gigantic-at-stage-ae?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 9</span>
					<span class="city">Pittsburgh, US</span>
					<span class="perf">Big Gigantic</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39573352-coals-at-nova-cvernovka?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 9</span>
					<span class="city">Bratislava, SK</span>
					<span class="perf">Ora The Molecule</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39208929-tourist-at-village-underground?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 9</span>
					<span class="city">London, GB</span>
					<span class="perf">Tourist</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39409117-big-gigantic-at-township-auditorium?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 15</span>
					<span class="city">Columbia, US</span>
					<span class="perf">Big Gigantic</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39409125-big-gigantic-at-charlotte-metro-credit-union-amphitheatre?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 16</span>
					<span class="city">Charlotte, US</span>
					<span class="perf">Big Gigantic</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39424274-monster-rally-at-empire-control-room?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 16</span>
					<span class="city">Austin, US</span>
					<span class="perf">Monster Rally</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39409130-big-gigantic-at-salvage-station?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 17</span>
					<span class="city">Asheville, US</span>
					<span class="perf">Big Gigantic</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39417552-monster-rally-at-echo?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 17</span>
					<span class="city">Los Angeles (LA), US</span>
					<span class="perf">Monster Rally</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39409136-big-gigantic-at-cocacola-roxy?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 18</span>
					<span class="city">Atlanta, US</span>
					<span class="perf">Big Gigantic</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39409140-big-gigantic-at-norva?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 19</span>
					<span class="city">Norfolk, US</span>
					<span class="perf">Big Gigantic</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39375873-nature-tv-at-prince-albert?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 20</span>
					<span class="city">Brighton, GB</span>
					<span class="perf">Nature TV</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39409154-big-gigantic-at-house-of-blues-boston-presented-by-cricket-wireless?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 20</span>
					<span class="city">Boston, US</span>
					<span class="perf">Big Gigantic</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39498926-adrianne-lenker-at-arts-riot-studio?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 22</span>
					<span class="city">Burlington, US</span>
					<span class="perf">Adrianne Lenker</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39420238-bull-at-edge-of-the-wedge?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 22</span>
					<span class="city">Southsea, GB</span>
					<span class="perf">Nature TV</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39498931-adrianne-lenker-at-sinclair?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 25</span>
					<span class="city">Cambridge, US</span>
					<span class="perf">Adrianne Lenker</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39439439-poolside-at-fawcett-hall-at-alma-mater?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 25</span>
					<span class="city">Tacoma, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39439145-poolside-at-showbox?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 26</span>
					<span class="city">Seattle, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39438472-poolside-at-commodore-ballroom?utm_source=15&utm_medium=partner">	
					<span class="dates">Apr 27</span>
					<span class="city">Vancouver, CA</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39401815-big-gigantic-at-shrine-auditorium?utm_source=15&utm_medium=partner">	
					<span class="dates">May 1</span>
					<span class="city">Los Angeles (LA), US</span>
					<span class="perf">Big Gigantic</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39437399-poolside-at-summit-music-hall?utm_source=15&utm_medium=partner">	
					<span class="dates">May 1</span>
					<span class="city">Denver, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39438923-poolside-at-bourbon-theatre?utm_source=15&utm_medium=partner">	
					<span class="dates">May 2</span>
					<span class="city">Lincoln, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39401821-big-gigantic-at-greek-theatre?utm_source=15&utm_medium=partner">	
					<span class="dates">May 2</span>
					<span class="city">Berkeley, US</span>
					<span class="perf">Big Gigantic</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39437207-poolside-at-metro?utm_source=15&utm_medium=partner">	
					<span class="dates">May 4</span>
					<span class="city">Chicago, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39404574-monophonics-at-brighton-music-hall?utm_source=15&utm_medium=partner">	
					<span class="dates">May 6</span>
					<span class="city">Boston, US</span>
					<span class="perf">Ghost Funk Orchestra</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39438677-poolside-at-theatre-of-living-arts?utm_source=15&utm_medium=partner">	
					<span class="dates">May 7</span>
					<span class="city">Philadelphia, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39404248-monophonics-at-black-cat?utm_source=15&utm_medium=partner">	
					<span class="dates">May 7</span>
					<span class="city">Washington, US</span>
					<span class="perf">Ghost Funk Orchestra</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39403816-monophonics-at-bowery-ballroom?utm_source=15&utm_medium=partner">	
					<span class="dates">May 8</span>
					<span class="city">New York (NYC), US</span>
					<span class="perf">Ghost Funk Orchestra</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39505461-poolside-at-cats-cradle?utm_source=15&utm_medium=partner">	
					<span class="dates">May 9</span>
					<span class="city">Carrboro, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39350447-poolside-at-brooklyn-bowl-nashville?utm_source=15&utm_medium=partner">	
					<span class="dates">May 11</span>
					<span class="city">Nashville, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39437475-poolside-at-terminal-west?utm_source=15&utm_medium=partner">	
					<span class="dates">May 12</span>
					<span class="city">Atlanta, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39265934-channel-tres-at-hall-elsewhere?utm_source=15&utm_medium=partner">	
					<span class="dates">May 13</span>
					<span class="city">Brooklyn, US</span>
					<span class="perf">Channel Tres</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39436188-poolside-at-tipitinas-uptown?utm_source=15&utm_medium=partner">	
					<span class="dates">May 14</span>
					<span class="city">New Orleans, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39265936-channel-tres-at-underground-arts?utm_source=15&utm_medium=partner">	
					<span class="dates">May 15</span>
					<span class="city">Philadelphia, US</span>
					<span class="perf">Channel Tres</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39439113-poolside-at-granada-theater?utm_source=15&utm_medium=partner">	
					<span class="dates">May 15</span>
					<span class="city">Dallas, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39265937-channel-tres-at-u-street-music-hall?utm_source=15&utm_medium=partner">	
					<span class="dates">May 16</span>
					<span class="city">Washington, US</span>
					<span class="perf">Channel Tres</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39545162-nature-tv-at-gullivers?utm_source=15&utm_medium=partner">	
					<span class="dates">May 17</span>
					<span class="city">Manchester, GB</span>
					<span class="perf">Nature TV</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39295662-channel-tres-at-virgin-mobile-mod-club?utm_source=15&utm_medium=partner">	
					<span class="dates">May 18</span>
					<span class="city">Toronto, CA</span>
					<span class="perf">Channel Tres</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39265926-channel-tres-at-el-club?utm_source=15&utm_medium=partner">	
					<span class="dates">May 20</span>
					<span class="city">Detroit, US</span>
					<span class="perf">Channel Tres</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39420535-channel-tres-at-sleeping-village?utm_source=15&utm_medium=partner">	
					<span class="dates">May 21</span>
					<span class="city">Chicago, US</span>
					<span class="perf">Channel Tres</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39511232-poolside-at-meow-wolf?utm_source=15&utm_medium=partner">	
					<span class="dates">May 21</span>
					<span class="city">Santa Fe, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39438625-poolside-at-191-toole?utm_source=15&utm_medium=partner">	
					<span class="dates">May 22</span>
					<span class="city">Tucson, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39420543-channel-tres-at-sleeping-village?utm_source=15&utm_medium=partner">	
					<span class="dates">May 22</span>
					<span class="city">Chicago, US</span>
					<span class="perf">Channel Tres</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39437485-poolside-at-crescent-ballroom?utm_source=15&utm_medium=partner">	
					<span class="dates">May 23</span>
					<span class="city">Phoenix, US</span>
					<span class="perf">Poolside</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39531785-boyz-ii-men-at-grand-casino-hinckley?utm_source=15&utm_medium=partner">	
					<span class="dates">Jun 5</span>
					<span class="city">Hinckley, US</span>
					<span class="perf">Bell Biv DeVoe</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/festivals/3303403-v101s-summer-jam/id/39481763-v101s-summer-jam-2020?utm_source=15&utm_medium=partner">	
					<span class="dates">Jun 20</span>
					<span class="city">Lincoln, US</span>
					<span class="perf">Bell Biv DeVoe</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/festivals/183146-electric-forest/id/39350052-electric-forest-festival-2020?utm_source=15&utm_medium=partner">	
					<span class="dates">Jun 25</span>
					<span class="city">Rothbury, US</span>
					<span class="perf">Flume</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39580139-98-degrees-at-anselmo-valencia-tori-amphitheater?utm_source=15&utm_medium=partner">	
					<span class="dates">Jun 26</span>
					<span class="city">Tucson, US</span>
					<span class="perf">Bell Biv DeVoe</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/festivals/757169-badlands-music/id/39505133-badlands-music-festival-2020?utm_source=15&utm_medium=partner">	
					<span class="dates">Jul 12</span>
					<span class="city">Calgary, CA</span>
					<span class="perf">Flume</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39573395-bell-biv-devoe-at-pechanga-resort-and-casino?utm_source=15&utm_medium=partner">	
					<span class="dates">Jul 17</span>
					<span class="city">Temecula, US</span>
					<span class="perf">Bell Biv DeVoe</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39518660-bell-biv-devoe-at-rendezvous-event-center?utm_source=15&utm_medium=partner">	
					<span class="dates">Jul 19</span>
					<span class="city">Winter Park, US</span>
					<span class="perf">Bell Biv DeVoe</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39567106-bell-biv-devoe-at-star-of-the-desert-arena?utm_source=15&utm_medium=partner">	
					<span class="dates">Aug 8</span>
					<span class="city">Primm, US</span>
					<span class="perf">Bell Biv DeVoe</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/festivals/1195543-lost-village/id/39444819-lost-village-festival-2020?utm_source=15&utm_medium=partner">	
					<span class="dates">Aug 27</span>
					<span class="city">Lincoln, GB</span>
					<span class="perf">Tourist</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39516196-adrianne-lenker-at-earth?utm_source=15&utm_medium=partner">	
					<span class="dates">Sep 6</span>
					<span class="city">London, GB</span>
					<span class="perf">Adrianne Lenker</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39577090-nature-tv-at-manchester-gullivers?utm_source=15&utm_medium=partner">	
					<span class="dates">Sep 6</span>
					<span class="city">Manchester, GB</span>
					<span class="perf">Nature TV</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39578558-monster-rally-at-empire-control-room?utm_source=15&utm_medium=partner">	
					<span class="dates">Sep 12</span>
					<span class="city">Austin, US</span>
					<span class="perf">Monster Rally</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39436377-new-kids-on-the-block-at-fenway-park?utm_source=15&utm_medium=partner">	
					<span class="dates">Sep 19</span>
					<span class="city">Boston, US</span>
					<span class="perf">Bell Biv DeVoe</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39575883-monster-rally-at-empire-control-room?utm_source=15&utm_medium=partner">	
					<span class="dates">Sep 21</span>
					<span class="city">Austin, US</span>
					<span class="perf">Monster Rally</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39465891-big-gigantic-at-red-rocks-amphitheatre?utm_source=15&utm_medium=partner">	
					<span class="dates">Sep 25</span>
					<span class="city">Morrison, US</span>
					<span class="perf">Big Gigantic</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39465890-big-gigantic-at-red-rocks-amphitheatre?utm_source=15&utm_medium=partner">	
					<span class="dates">Sep 26</span>
					<span class="city">Morrison, US</span>
					<span class="perf">Big Gigantic</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39561536-bell-biv-devoe-at-chase-center?utm_source=15&utm_medium=partner">	
					<span class="dates">Oct 10</span>
					<span class="city">San Francisco, US</span>
					<span class="perf">Bell Biv DeVoe</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39495289-pup-at-casbah?utm_source=15&utm_medium=partner">	
					<span class="dates">Oct 11</span>
					<span class="city">San Diego, US</span>
					<span class="perf">illuminati hotties</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/38603014-tourist-at-manchester-gorilla?utm_source=15&utm_medium=partner">	
					<span class="dates">Oct 11</span>
					<span class="city">Manchester, GB</span>
					<span class="perf">Tourist</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39495290-pup-at-casbah?utm_source=15&utm_medium=partner">	
					<span class="dates">Oct 12</span>
					<span class="city">San Diego, US</span>
					<span class="perf">illuminati hotties</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39176322-pup-at-ace-of-spades?utm_source=15&utm_medium=partner">	
					<span class="dates">Oct 15</span>
					<span class="city">Sacramento, US</span>
					<span class="perf">illuminati hotties</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39498198-adrianne-lenker-at-white-eagle-hall?utm_source=15&utm_medium=partner">	
					<span class="dates">Nov 9</span>
					<span class="city">Jersey City, US</span>
					<span class="perf">Adrianne Lenker</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39498189-adrianne-lenker-at-colony?utm_source=15&utm_medium=partner">	
					<span class="dates">Nov 10</span>
					<span class="city">Woodstock, US</span>
					<span class="perf">Adrianne Lenker</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39498928-adrianne-lenker-at-3s-artspace?utm_source=15&utm_medium=partner">	
					<span class="dates">Nov 12</span>
					<span class="city">Portsmouth, US</span>
					<span class="perf">Adrianne Lenker</span>
					</a>
				</li>
				<li><a target="_blank" href="http://www.songkick.com/concerts/39498933-adrianne-lenker-at-one-longfellow-square?utm_source=15&utm_medium=partner">	
					<span class="dates">Nov 14</span>
					<span class="city">Portland, US</span>
					<span class="perf">Adrianne Lenker</span>
					</a>
				</li>
		</ul>

		</div>
<div class="ad-wrapper ad-rectangle-modern ad-rectangleB" id="ad-rectangleB"></div>    <div id="news" class="section">
        <h3><a href="https://blog.hypem.com">HYPE MACHINE PROJECT NEWS</a></h3>
        <ul>
                                <li><a href="https://blog.hypem.com/2020/01/zeitgeist-2019/">
                            <span class="dates">Jan 2</span>
                            <span class="title">Zeitgeist 2019</span>
                        </a>
                    </li>
                                    <li><a href="https://blog.hypem.com/2019/07/state-of-hype-machines-crowdfunding-year-two/">
                            <span class="dates">Jul 29</span>
                            <span class="title">State of Hype Machine’s Crowdfunding: Year Two</span>
                        </a>
                    </li>
                                    <li><a href="https://blog.hypem.com/2019/04/loved-by-your-music-neighbors/">
                            <span class="dates">Apr 12</span>
                            <span class="title">Loved by – your music neighbors</span>
                        </a>
                    </li>
                                    <li><a href="https://blog.hypem.com/2019/03/new-good-mixes/">
                            <span class="dates">Mar 29</span>
                            <span class="title">New: Good mixes</span>
                        </a>
                    </li>
                                    <li><a href="https://blog.hypem.com/2018/12/zeitgeist-2018/">
                            <span class="dates">Dec 13</span>
                            <span class="title">Zeitgeist 2018</span>
                        </a>
                    </li>
                                    <li><a href="https://blog.hypem.com/2018/05/a-year-of-crowdfunding-hype-machine/">
                            <span class="dates">May 24</span>
                            <span class="title">A year of crowdfunding Hype Machine</span>
                        </a>
                    </li>
                        </ul>
    </div><!-- news -->


</div> <!-- content-right -->

 <div class="user header-box">
    <div class="user-information">

        <a href="/napcae">
            <img class="avatar" src="https://s3.amazonaws.com/faces-s3.hypem.com/14348821989890667_75.png" height="75" width="75" />
        </a>
        <p class="username"><a href="/napcae">napcae</a> 

             
            
            
        </p>

        <p class="join-date">Joined Mar 31st, 2013</p>
    
                    <p class="location">Berlin, DE</p>

            <p class="website">
                </a>
            </p>
        
        
        


    </div>
    <div class="chocolate-bar five">
                
        <div class="infoslices">
            <a class="slice " 
                href="/napcae" 
                title="napcae's favorite tracks">
                <span class="desc"><span class="icon-heart"></span>Favorites</span>
                <span class="big-num">266</span>
            </a>
            
            <a class="slice" 
                href="/napcae/list_friends"
                title="People napcae follows">
                <span class="desc"><span class="icon-friends"></span>Friends</span>
                <span class="big-num">10</span>
            </a>

            
            <a class="slice" 
                href="/napcae/list_blogs"
                title="Blogs napcae follows">
                <span class="desc"><span class="icon-list"></span>Sites</span>
                <span class="big-num">0</span> 
            </a>

            <a class="slice" 
                href="/napcae/list_artists"
                title="Artists napcae follows">
                <span class="desc"><span class="icon-list"></span>Artists</span>
                <span class="big-num">0</span> 
            </a>
        </div>

    </div>
    </div>
    <div id="message" class="profile">

        <h1>napcae's Favorite Tracks</h1>            <a id="fav_user_napcae" 
                class="first bite fav-button fav_user_napcae follow"
                onclick="toggleFavoriteFriend('napcae');return false;" 
                title="Follow napcae">
                <span class="icon-plus-minus"></span><span class="fav-button-text">Follow</span>
            </a>
                </div><!-- message -->
<ul id="submenu" class="profile">

            <li id="nav-favorites">
              <a href="/napcae" class="selected">Favorites</a>
            </li>
            <li id="nav-playlist-1">
              <a href="/napcae/playlist/1" >Up</a>
            </li>
            <li id="nav-playlist-2">
              <a href="/napcae/playlist/2" >Down</a>
            </li>
            <li id="nav-playlist-3">
              <a href="/napcae/playlist/3" >Weird</a>
            </li>
            <li id="nav-history">
              <a href="/napcae/history" >Listening History</a>
            </li>
            <li id="nav-obsessed">
              <a href="/napcae/obsessed" >Obsessions</a>
            </li>

    <li id="submenu-filter">
        <span class="title">Sort:</span>
                            <span id="submenu-filter-title">Newest First &darr;</span>
                    
        <ul>
                    <li>
              <a  href="/napcae">Newest First <span class="checkmark">&#x2713;</span></a>
          </li>
                    <li>
              <a  href="/napcae/oldest">Oldest First </a>
          </li>
                    <li>
              <a  href="/napcae?sortby=favorite">Most Favorites </a>
          </li>
                    <li>
              <a  href="/napcae?sortby=leastfavorite">Least Favorites </a>
          </li>
                    <li>
              <a  href="/napcae/shuffle">Shuffle </a>
          </li>
                </ul>
    </li>
  
</ul>




<div id="content-left" class="me-pages">

            <script type="text/javascript">set_nav_item_active();</script>

        <script type="text/javascript">
            var libs  = {
                editable : 'https://static.hypem.com/rev_1401889644/js/libs/jquery.jeditable.js',
            };
            var libs_loaded = [];

            for(var lib in libs){
                if(!$.fn[lib]){
                    libs_loaded.push($.cachedScript(libs[lib]));
                }
            }
            // fire run script when everything is loaded
            jQuery.when.apply(this, libs_loaded).then(function(){ 
                setup_inplace_edit();
            });
        </script>
    
<div id="track-list">



<div data-itemid="2xbat" id="section-track-2xbat"
     class="section section-track haarp-section-track  first"  >




<div class="track-info">Loved on Mar 22nd</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2xbat/Maurice+Fulton+%26+Peggy+Gou+-+Jigoo"
               title="Jigoo - go to page for this track"
       style="background-color:#0C8DCE;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Maurice Fulton &amp; Peggy Gou - search Hype Machine for this artist"
               href="/artist/Maurice+Fulton+%26+Peggy+Gou">Maurice Fulton & Peggy Gou</a><span class="divider"> - </span>        <a class="track" title="Jigoo - go to page for this track"
           href="/track/2xbat/Maurice+Fulton+%26+Peggy+Gou+-+Jigoo">
            <span class="base-title">Jigoo</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xbat&text=Maurice+Fulton+%26+Peggy+Gou+-+Jigoo%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xbat&title=Maurice+Fulton+%26+Peggy+Gou+-+Jigoo"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2xbat" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 43"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2xbat"
                   href="">43                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2xbat"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 8 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2xbat">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/0XQWAVmz1hD1FW13U2nm2r">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/groove+magazine/18116">Groove Magazine</a><a
                            class="follow-pill fav_site_18116 follow"
                            onclick="toggleFavoriteBlog('18116');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;HÃ¶rt hier unsere Platten der Woche mit Hyroglifics & Sinistarr, JASSS, LUZ1E, Maurice Fulton und Zeki&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://groove.de/2020/03/19/die-platten-der-woche-mit-jasss-luz1e-und-maurice-fulton/"
                            title="19 Mar 2020 - 9:58 AM CST">

                             on Mar 19th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2w8g5" id="section-track-2w8g5"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Mar 22nd</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2w8g5/Lyrah+-+Down+Low+%28Penguin+Prison+Remix%29"
               title="Down Low (Penguin Prison Remix) - go to page for this track"
       style="background-color:#13ADCF;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Lyrah - search Hype Machine for this artist"
               href="/artist/Lyrah">Lyrah</a><span class="divider"> - </span>        <a class="track" title="Down Low (Penguin Prison Remix) - go to page for this track"
           href="/track/2w8g5/Lyrah+-+Down+Low+%28Penguin+Prison+Remix%29">
            <span class="base-title">Down Low</span> <span class="remix-link">Penguin Prison Remix</span>         </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w8g5&text=Lyrah+-+Down+Low+%28Penguin+Prison+Remix%29%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w8g5&title=Lyrah+-+Down+Low+%28Penguin+Prison+Remix%29"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2w8g5" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 893"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2w8g5"
                   href="">893                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2w8g5"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 4 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2w8g5">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/7EzVXXAMEKjriIHERJdAYd">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/at+cost+magazine/22590">At Cost Magazine</a><a
                            class="follow-pill fav_site_22590 follow"
                            onclick="toggleFavoriteBlog('22590');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;The artistic personification of San Francisco’s Kathleen Warner, Lyrah shares single “The View”. Hoping that her&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://atcostmag.tumblr.com/post/613162860934217728/lyrah-the-view"
                            title="20 Mar 2020 - 9:27 PM CST">

                             on Mar 20th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="bsg2" id="section-track-bsg2"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Mar 22nd</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/bsg2/Madonna+-+Angel+%28Extended+Dance+Mix%29"
               title="Angel (Extended Dance Mix) - go to page for this track"
       style="background-color:#13ADCF;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Madonna - search Hype Machine for this artist"
               href="/artist/Madonna">Madonna</a><span class="divider"> - </span>        <a class="track" title="Angel (Extended Dance Mix) - go to page for this track"
           href="/track/bsg2/Madonna+-+Angel+%28Extended+Dance+Mix%29">
            <span class="base-title">Angel (Extended Dance Mix)</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2Fbsg2&text=Madonna+-+Angel+%28Extended+Dance+Mix%29%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2Fbsg2&title=Madonna+-+Angel+%28Extended+Dance+Mix%29"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_bsg2" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 20"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_bsg2"
                   href="">20                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_bsg2"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 4 sites</a>
                </span>

        <span class="download">
            
        &bull;

        
                    
            <span class="download-extra">
             &bull;             Also on:

            
                                            <a rel="nofollow"
                          href="/go/itunes_web/madonna%2Fid20044?entity=artist">Apple Music</a>
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/the+lost+turntable/4450">The Lost Turntable</a><a
                            class="follow-pill fav_site_4450 follow"
                            onclick="toggleFavoriteBlog('4450');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Hi. How you doing. Yup. I thought I would use this space to write a bit&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="http://www.lostturntable.com/2020/03/20/madonna-in-the-time-of-coronavirus/"
                            title="20 Mar 2020 - 9:27 AM CST">

                             on Mar 20th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2xkas" id="section-track-2xkas"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Mar 22nd</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2xkas/Imagiro+-+Until+Im+Home"
               title="Until Im Home - go to page for this track"
       style="background-color:#92704B;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Imagiro - search Hype Machine for this artist"
               href="/artist/Imagiro">Imagiro</a><span class="divider"> - </span>        <a class="track" title="Until Im Home - go to page for this track"
           href="/track/2xkas/Imagiro+-+Until+Im+Home">
            <span class="base-title">Until Im Home</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xkas&text=Imagiro+-+Until+Im+Home%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xkas&title=Imagiro+-+Until+Im+Home"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2xkas" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 106"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2xkas"
                   href="">106                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2xkas"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 3 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2xkas">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/1UA9mnrucrT9yYOscmw1be">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/hip+dozer/23311">HIP DOZER</a><a
                            class="follow-pill fav_site_23311 follow"
                            onclick="toggleFavoriteBlog('23311');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;(Stereofox.com) Our friends at Stereofox just released “Until I’m Home” by Imagiro. Three minutes of a&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://hipdozer.tumblr.com/post/614294178222997504/stereofoxcom-our-friends-at-stereofox-just"
                            title="2 Apr 2020 - 9:09 AM CST">

                             last week&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2xhz7" id="section-track-2xhz7"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Mar 22nd</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2xhz7/sylo+nozra+-+Ginny"
               title="Ginny - go to page for this track"
       style="background-color:#D0935C;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="sylo nozra - search Hype Machine for this artist"
               href="/artist/sylo+nozra">sylo nozra</a><span class="divider"> - </span>        <a class="track" title="Ginny - go to page for this track"
           href="/track/2xhz7/sylo+nozra+-+Ginny">
            <span class="base-title">Ginny</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xhz7&text=sylo+nozra+-+Ginny%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xhz7&title=sylo+nozra+-+Ginny"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2xhz7" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 67"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2xhz7"
                   href="">67                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2xhz7"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 8 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2xhz7">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/6i5a50hEuC7FtJoBVqKpcT">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/grungecake/21795">GrungeCake</a><a
                            class="follow-pill fav_site_21795 follow"
                            onclick="toggleFavoriteBlog('21795');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Sylo Nozra’s voice and music are smooth and as he uses these to express himself artistically,&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://grungecake.com/sylo-nozra-ginny/articles/65073"
                            title="27 Mar 2020 - 10:47 PM CST">

                             last week&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2xka3" id="section-track-2xka3"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Mar 22nd</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2xka3/Lyrah+-+The+View"
               title="The View - go to page for this track"
       style="background-color:#B9856F;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Lyrah - search Hype Machine for this artist"
               href="/artist/Lyrah">Lyrah</a><span class="divider"> - </span>        <a class="track" title="The View - go to page for this track"
           href="/track/2xka3/Lyrah+-+The+View">
            <span class="base-title">The View</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xka3&text=Lyrah+-+The+View%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xka3&title=Lyrah+-+The+View"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2xka3" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 388"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2xka3"
                   href="">388                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2xka3"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 8 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2xka3">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/6OGNCy0auXwpa25uAIqmtM">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/keep+walking+music/24147">Keep Walking Music</a><a
                            class="follow-pill fav_site_24147 follow"
                            onclick="toggleFavoriteBlog('24147');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Lyrah is a singer/writer/producer based in San Francisco. Growing up in a sleepy, small town in&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://keepwalkingmusic.com/lyrah-the-view/"
                            title="6 Apr 2020 - 2:49 PM CST">

                             3 days ago&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2xckk" id="section-track-2xckk"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Mar 3rd</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2xckk/Marie+Dahlstrom+-+Like+Sand+%28Feat.+Beau+Diako%29"
               title="Like Sand (Feat. Beau Diako) - go to page for this track"
       style="background-color:#030D17;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Marie Dahlstrom - search Hype Machine for this artist"
               href="/artist/Marie+Dahlstrom">Marie Dahlstrom</a><span class="divider"> - </span>        <a class="track" title="Like Sand (Feat. Beau Diako) - go to page for this track"
           href="/track/2xckk/Marie+Dahlstrom+-+Like+Sand+%28Feat.+Beau+Diako%29">
            <span class="base-title">Like Sand (Feat. Beau Diako)</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xckk&text=Marie+Dahlstrom+-+Like+Sand+%28Feat.+Beau+Diako%29%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xckk&title=Marie+Dahlstrom+-+Like+Sand+%28Feat.+Beau+Diako%29"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2xckk" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 301"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2xckk"
                   href="">301                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2xckk"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 9 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2xckk">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/2fWlUgX2Qa44ZQCT2rKF0U">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/soulbounce/11828">SoulBounce</a><a
                            class="follow-pill fav_site_11828 follow"
                            onclick="toggleFavoriteBlog('11828');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Bounce-Worthy darling Marie Dahlstrom has been prepping us for her debut album for years with a&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="http://www.soulbounce.com/2020/03/marie-dahlstrom-releases-title-track-from-debut-album-like-sand/"
                            title="3 Mar 2020 - 4:00 PM CST">

                             on Mar 3rd&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->
<div class="ad-wrapper ad-leaderboard ad-leaderboard-tracks ad-leaderboard-tracks-A" id="ad-leaderboard-tracks-A"></div>

<div data-itemid="2sdsn" id="section-track-2sdsn"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Feb 29th</div>

<div class="stack-featured"><a href="/stack/207" title="This track featured in Stack №207, our music newsletter">Stack №207</a></div>


<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2sdsn/Adrianne+Lenker+-+symbol"
               title="symbol - go to page for this track"
       style="background-color:#3C3C3C;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Adrianne Lenker - search Hype Machine for this artist"
               href="/artist/Adrianne+Lenker">Adrianne Lenker</a><span class="divider"> - </span>        <a class="track" title="symbol - go to page for this track"
           href="/track/2sdsn/Adrianne+Lenker+-+symbol">
            <span class="base-title">symbol</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2sdsn&text=Adrianne+Lenker+-+symbol%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2sdsn&title=Adrianne+Lenker+-+symbol"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2sdsn" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 488"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2sdsn"
                   href="">488                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2sdsn"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 16 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2sdsn">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/7f3xVpWfp3FPursBSrIEMJ">Spotify</a>
            
                             &bull;                 <a rel="nofollow"
                          href="/go/itunes_web/symbol%2F1421340949%3Fi%3D1421340964?entity=album">Apple Music</a>
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/hi54/24430">HI54</a><a
                            class="follow-pill fav_site_24430 follow"
                            onclick="toggleFavoriteBlog('24430');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;* Providing the A's to the 5 HIGHLY RECOMMENDED Q's today is Lewin — a singer-songer&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://hi54.blog/content/highly-recommended-w/-lewin"
                            title="28 Feb 2020 - 8:29 AM CST">

                             on Feb 28th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2xeg5" id="section-track-2xeg5"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Feb 29th</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2xeg5/Disclosure+-+Tondo"
               title="Tondo - go to page for this track"
       style="background-color:#80BCD4;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Disclosure - search Hype Machine for this artist"
               href="/artist/Disclosure">Disclosure</a><span class="divider"> - </span>        <a class="track" title="Tondo - go to page for this track"
           href="/track/2xeg5/Disclosure+-+Tondo">
            <span class="base-title">Tondo</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xeg5&text=Disclosure+-+Tondo%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xeg5&title=Disclosure+-+Tondo"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2xeg5" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 938"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2xeg5"
                   href="">938                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2xeg5"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 5 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2xeg5">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/23PIMIlFx1FeiCmmIf1RgZ">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/the+new+lofi/15524">The New LoFi</a><a
                            class="follow-pill fav_site_15524 follow"
                            onclick="toggleFavoriteBlog('15524');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            
                        <a
                            class="readpost"
                            href="http://www.thenewlofi.com/2020/03/disclosure-have-released-a-new-album-ecstasy/"
                            title="28 Mar 2020 - 1:45 AM CST">

                             last week&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2wmnq" id="section-track-2wmnq"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Feb 28th</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2wmnq/GHSTWRLD+-+Everything+%28feat+Metaxas%29"
               title="Everything (feat Metaxas) - go to page for this track"
       style="background-color:#FD6A56;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="GHSTWRLD - search Hype Machine for this artist"
               href="/artist/GHSTWRLD">GHSTWRLD</a><span class="divider"> - </span>        <a class="track" title="Everything (feat Metaxas) - go to page for this track"
           href="/track/2wmnq/GHSTWRLD+-+Everything+%28feat+Metaxas%29">
            <span class="base-title">Everything (feat Metaxas)</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wmnq&text=GHSTWRLD+-+Everything+%28feat+Metaxas%29%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wmnq&title=GHSTWRLD+-+Everything+%28feat+Metaxas%29"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2wmnq" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 96"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2wmnq"
                   href="">96                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2wmnq"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 4 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2wmnq">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/45hEz9nWuc8IgUEwY53l4k">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/the+burning+ear/10819">The Burning Ear</a><a
                            class="follow-pill fav_site_10819 follow"
                            onclick="toggleFavoriteBlog('10819');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            
                        <a
                            class="readpost"
                            href="https://www.theburningear.com/ghstwrld-everything-feat-metaxas/"
                            title="26 Feb 2020 - 5:15 PM CST">

                             on Feb 26th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2wk1t" id="section-track-2wk1t"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Feb 28th</div>

<div class="stack-featured"><a href="/stack/253" title="This track featured in Stack №253, our music newsletter">Stack №253</a></div>


<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2wk1t/illuminati+hotties+-+ppl+plzr"
               title="ppl plzr - go to page for this track"
       style="background-color:#0C1622;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="illuminati hotties - search Hype Machine for this artist"
               href="/artist/illuminati+hotties">illuminati hotties</a><span class="divider"> - </span>        <a class="track" title="ppl plzr - go to page for this track"
           href="/track/2wk1t/illuminati+hotties+-+ppl+plzr">
            <span class="base-title">ppl plzr</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wk1t&text=illuminati+hotties+-+ppl+plzr%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wk1t&title=illuminati+hotties+-+ppl+plzr"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2wk1t" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 500"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2wk1t"
                   href="">500                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2wk1t"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 15 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2wk1t">Bandcamp</a> 
        
            </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/music+islands/21246">music islands</a><a
                            class="follow-pill fav_site_21246 follow"
                            onclick="toggleFavoriteBlog('21246');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;illuminati hotties – ppl plzr ロサンゼルスで活動する Sarah Tudzin を中心に結成されたオルタナインディーバンド ILLUMINATI HOTTIES。彼女は SLOWDIVEやKILLSなどを手がけるエンジニア兼ドラマー。 illuminati hotties – I&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://yamamiya.wordpress.com/2020/02/26/illuminatihotties/"
                            title="25 Feb 2020 - 3:42 PM CST">

                             on Feb 25th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2xb19" id="section-track-2xb19"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Feb 21st</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2xb19/RAYOWA+-+Chance"
               title="Chance - go to page for this track"
       style="background-color:#080C15;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="RAYOWA - search Hype Machine for this artist"
               href="/artist/RAYOWA">RAYOWA</a><span class="divider"> - </span>        <a class="track" title="Chance - go to page for this track"
           href="/track/2xb19/RAYOWA+-+Chance">
            <span class="base-title">Chance</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xb19&text=RAYOWA+-+Chance%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xb19&title=RAYOWA+-+Chance"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2xb19" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 286"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2xb19"
                   href="">286                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2xb19"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 7 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2xb19">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/7uoiYmPfTK6SPOYFc8htal">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/cruel+rhythm/16746">Cruel Rhythm</a><a
                            class="follow-pill fav_site_16746 follow"
                            onclick="toggleFavoriteBlog('16746');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;a winner, baby. MP3&rdquo;
                        <a
                            class="readpost"
                            href="https://cruelrhythm.tumblr.com/post/611107622029000704"
                            title="27 Feb 2020 - 4:00 AM CST">

                             on Feb 27th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2x0sc" id="section-track-2x0sc"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Feb 21st</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2x0sc/Khruangbin+%26+Leon+Bridges+-+Texas+Sun"
               title="Texas Sun - go to page for this track"
       style="background-color:#1B7E9E;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Khruangbin &amp; Leon Bridges - search Hype Machine for this artist"
               href="/artist/Khruangbin+%26+Leon+Bridges">Khruangbin & Leon Bridges</a><span class="divider"> - </span>        <a class="track" title="Texas Sun - go to page for this track"
           href="/track/2x0sc/Khruangbin+%26+Leon+Bridges+-+Texas+Sun">
            <span class="base-title">Texas Sun</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2x0sc&text=Khruangbin+%26+Leon+Bridges+-+Texas+Sun%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2x0sc&title=Khruangbin+%26+Leon+Bridges+-+Texas+Sun"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2x0sc" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 844"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2x0sc"
                   href="">844                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2x0sc"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 5 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2x0sc">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/3k5oLgungD1dSOGLqQdIQw">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/popmatters/2975">PopMatters</a><a
                            class="follow-pill fav_site_2975 follow"
                            onclick="toggleFavoriteBlog('2975');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Keep Reading&rdquo;
                        <a
                            class="readpost"
                            href="https://www.popmatters.com/khruangbin-leon-bridges-texas-sun-2645207069.html"
                            title="21 Feb 2020 - 8:15 AM CST">

                             on Feb 21st&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2xcvj" id="section-track-2xcvj"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Feb 21st</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2xcvj/Tom+Misch+%26+Yussef+Dayes+-+What+Kinda+Music"
               title="What Kinda Music - go to page for this track"
       style="background-color:#D86A51;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Tom Misch &amp; Yussef Dayes - search Hype Machine for this artist"
               href="/artist/Tom+Misch+%26+Yussef+Dayes">Tom Misch & Yussef Dayes</a><span class="divider"> - </span>        <a class="track" title="What Kinda Music - go to page for this track"
           href="/track/2xcvj/Tom+Misch+%26+Yussef+Dayes+-+What+Kinda+Music">
            <span class="base-title">What Kinda Music</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xcvj&text=Tom+Misch+%26+Yussef+Dayes+-+What+Kinda+Music%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2xcvj&title=Tom+Misch+%26+Yussef+Dayes+-+What+Kinda+Music"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2xcvj" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 253"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2xcvj"
                   href="">253                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2xcvj"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 3 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2xcvj">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/4FQytrC7QjGy8mecYCnsuy">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/house+of+lords/22061">House of Lords</a><a
                            class="follow-pill fav_site_22061 follow"
                            onclick="toggleFavoriteBlog('22061');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;New one from Tom Misch and Yussef Dayes! The post Tom Misch & Yussef Dayes –&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="http://houseoflords.xyz/tom-misch-yussef-dayes-kinda-music/"
                            title="19 Feb 2020 - 9:14 PM CST">

                             on Feb 19th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->
<div class="ad-wrapper ad-leaderboard ad-leaderboard-tracks ad-leaderboard-tracks-B" id="ad-leaderboard-tracks-B"></div>

<div data-itemid="2wds6" id="section-track-2wds6"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Jan 22nd</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2wds6/Bremer+McCoy+-+H%C3%B8jder"
               title="H&oslash;jder - go to page for this track"
       style="background-color:#0E223D;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Bremer McCoy - search Hype Machine for this artist"
               href="/artist/Bremer+McCoy">Bremer McCoy</a><span class="divider"> - </span>        <a class="track" title="H&oslash;jder - go to page for this track"
           href="/track/2wds6/Bremer+McCoy+-+H%C3%B8jder">
            <span class="base-title">Højder</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wds6&text=Bremer+McCoy+-+H%C3%B8jder%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wds6&title=Bremer+McCoy+-+H%C3%B8jder"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2wds6" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 78"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2wds6"
                   href="">78                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2wds6"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 3 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2wds6">Bandcamp</a> 
        
            </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/support+your+local+ghetto/22840">Support Your Local Ghetto</a><a
                            class="follow-pill fav_site_22840 follow"
                            onclick="toggleFavoriteBlog('22840');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Sunday morning #earcandy –> Utopia by Bremer McCoy Jazz + Electronic + Dub + Classical&rdquo;
                        <a
                            class="readpost"
                            href="https://supportyourlocalghetto.tumblr.com/post/190340169834/sunday-morning-earcandy-utopia-by-bremer"
                            title="19 Jan 2020 - 2:43 AM CST">

                             on Jan 19th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2wze6" id="section-track-2wze6"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Jan 20th</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2wze6/MAGDALENA+BAY+-+Oh+Hell"
               title="Oh Hell - go to page for this track"
       style="background-color:#345286;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="MAGDALENA BAY - search Hype Machine for this artist"
               href="/artist/MAGDALENA+BAY">MAGDALENA BAY</a><span class="divider"> - </span>        <a class="track" title="Oh Hell - go to page for this track"
           href="/track/2wze6/MAGDALENA+BAY+-+Oh+Hell">
            <span class="base-title">Oh Hell</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wze6&text=MAGDALENA+BAY+-+Oh+Hell%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wze6&title=MAGDALENA+BAY+-+Oh+Hell"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2wze6" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 184"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2wze6"
                   href="">184                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2wze6"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 4 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2wze6">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/43HbqSsvOQ2CgLiB5OqPIF">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/at+cost+magazine/22590">At Cost Magazine</a><a
                            class="follow-pill fav_site_22590 follow"
                            onclick="toggleFavoriteBlog('22590');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;The sparkly new single from Los Angeles’ prolific pop duo, Magdalena Bay explain “How to Get&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://atcostmag.tumblr.com/post/190353561513/magdalena-bay-how-to-get-physical"
                            title="19 Jan 2020 - 6:23 PM CST">

                             on Jan 19th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2x52b" id="section-track-2x52b"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Jan 17th</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2x52b/Poolside+-+Around+The+Sun+%28feat.+Amo+Amo%29"
               title="Around The Sun (feat. Amo Amo) - go to page for this track"
       style="background-color:#F4874C;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Poolside - search Hype Machine for this artist"
               href="/artist/Poolside">Poolside</a><span class="divider"> - </span>        <a class="track" title="Around The Sun (feat. Amo Amo) - go to page for this track"
           href="/track/2x52b/Poolside+-+Around+The+Sun+%28feat.+Amo+Amo%29">
            <span class="base-title">Around The Sun (feat. Amo Amo)</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2x52b&text=Poolside+-+Around+The+Sun+%28feat.+Amo+Amo%29%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2x52b&title=Poolside+-+Around+The+Sun+%28feat.+Amo+Amo%29"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2x52b" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 208"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2x52b"
                   href="">208                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2x52b"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 2 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2x52b">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/0VrdF2Q4bSf5DWCnEPii0P">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/sawdust+and+gin/23025">Sawdust and Gin</a><a
                            class="follow-pill fav_site_23025 follow"
                            onclick="toggleFavoriteBlog('23025');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Poolside Share Sunny and Celebratory “Around the Sun” Single Alongside LP Announcement Originally appeared on Grimy&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://sawdustandgin.com/post/190917303971/poolside-amo-amo-around-the-sun"
                            title="19 Feb 2020 - 3:01 PM CST">

                             on Feb 19th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2x4sq" id="section-track-2x4sq"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Jan 17th</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2x4sq/Stray+Fossa+-+Are+You+Gonna+Be+Okay"
               title="Are You Gonna Be Okay - go to page for this track"
       style="background-color:#2B022C;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Stray Fossa - search Hype Machine for this artist"
               href="/artist/Stray+Fossa">Stray Fossa</a><span class="divider"> - </span>        <a class="track" title="Are You Gonna Be Okay - go to page for this track"
           href="/track/2x4sq/Stray+Fossa+-+Are+You+Gonna+Be+Okay">
            <span class="base-title">Are You Gonna Be Okay</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2x4sq&text=Stray+Fossa+-+Are+You+Gonna+Be+Okay%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2x4sq&title=Stray+Fossa+-+Are+You+Gonna+Be+Okay"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2x4sq" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 163"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2x4sq"
                   href="">163                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2x4sq"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 7 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2x4sq">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/5B5lxAW6Iz5E3dWWPs7mnC">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/the+burning+ear/10819">The Burning Ear</a><a
                            class="follow-pill fav_site_10819 follow"
                            onclick="toggleFavoriteBlog('10819');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            
                        <a
                            class="readpost"
                            href="https://www.theburningear.com/stray-fossa-are-you-gonna-be-okay/"
                            title="13 Feb 2020 - 2:27 PM CST">

                             on Feb 13th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2x4tn" id="section-track-2x4tn"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Jan 17th</div>

<div class="stack-featured"><a href="/stack/261" title="This track featured in Stack №261, our music newsletter">Stack №261</a></div>


<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2x4tn/Magdalena+Bay+-+How+to+Get+Physical"
               title="How to Get Physical - go to page for this track"
       style="background-color:#44C4DD;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Magdalena Bay - search Hype Machine for this artist"
               href="/artist/Magdalena+Bay">Magdalena Bay</a><span class="divider"> - </span>        <a class="track" title="How to Get Physical - go to page for this track"
           href="/track/2x4tn/Magdalena+Bay+-+How+to+Get+Physical">
            <span class="base-title">How to Get Physical</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2x4tn&text=Magdalena+Bay+-+How+to+Get+Physical%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2x4tn&title=Magdalena+Bay+-+How+to+Get+Physical"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2x4tn" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 743"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2x4tn"
                   href="">743                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2x4tn"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 11 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2x4tn">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/6N2ok8fE2SKI79rkLfMpE7">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/pitchfork/3000">Pitchfork</a><a
                            class="follow-pill fav_site_3000 follow"
                            onclick="toggleFavoriteBlog('3000');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Citing Gwen Stefani and Grimes as influences, the L.A. duo’s heartfelt take on bubblegum is a&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://pitchfork.com/reviews/albums/magdalena-bay-a-little-rhythm-and-a-wicked-feeling-ep/"
                            title="20 Mar 2020 - 12:00 AM CST">

                             on Mar 20th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2vz0v" id="section-track-2vz0v"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Jan 17th</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2vz0v/Channel+Tres+-+Sexy+Black+Timberlake+%28SG+Lewis+Remix%29"
               title="Sexy Black Timberlake (SG Lewis Remix) - go to page for this track"
       style="background-color:#BCB658;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Channel Tres - search Hype Machine for this artist"
               href="/artist/Channel+Tres">Channel Tres</a><span class="divider"> - </span>        <a class="track" title="Sexy Black Timberlake (SG Lewis Remix) - go to page for this track"
           href="/track/2vz0v/Channel+Tres+-+Sexy+Black+Timberlake+%28SG+Lewis+Remix%29">
            <span class="base-title">Sexy Black Timberlake</span> <span class="remix-link">SG Lewis Remix</span>         </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vz0v&text=Channel+Tres+-+Sexy+Black+Timberlake+%28SG+Lewis+Remix%29%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vz0v&title=Channel+Tres+-+Sexy+Black+Timberlake+%28SG+Lewis+Remix%29"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2vz0v" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 299"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2vz0v"
                   href="">299                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2vz0v"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 2 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2vz0v">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/20E3uaKqO6R4iN2uB96TNc">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/silence+nogood/13271">Silence Nogood</a><a
                            class="follow-pill fav_site_13271 follow"
                            onclick="toggleFavoriteBlog('13271');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Music is solely about feeling. Even the words are written for the heart more than the&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="http://silencenogood.net/channel-tres/"
                            title="14 Jan 2020 - 2:28 AM CST">

                             on Jan 14th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2sghv" id="section-track-2sghv"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Dec 29th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2sghv/Tourist+-+Apollo"
               title="Apollo - go to page for this track"
       style="background-color:#F4EFEB;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Tourist - search Hype Machine for this artist"
               href="/artist/Tourist">Tourist</a><span class="divider"> - </span>        <a class="track" title="Apollo - go to page for this track"
           href="/track/2sghv/Tourist+-+Apollo">
            <span class="base-title">Apollo</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2sghv&text=Tourist+-+Apollo%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2sghv&title=Tourist+-+Apollo"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2sghv" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 1.4K"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2sghv"
                   href="">1.4K                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2sghv"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 5 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2sghv">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/5huPJYLNtpeeaGZN3gdAaf">Spotify</a>
            
                             &bull;                 <a rel="nofollow"
                          href="/go/itunes_web/apollo-edit%2F1436426426%3Fi%3D1436426432?entity=album">Apple Music</a>
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/concrete+opinions/23619">Concrete Opinions</a><a
                            class="follow-pill fav_site_23619 follow"
                            onclick="toggleFavoriteBlog('23619');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;A Winged Victory for the Sullen – The Slow Descent Has Begun [from The Undivided Five]&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="http://concreteopinions.com/31-days-of-good-12-27-19/"
                            title="27 Dec 2019 - 2:27 AM CST">

                             on Dec 27th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2tnhf" id="section-track-2tnhf"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Dec 13th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2tnhf/Snow+Palms+-+Everything+Ascending"
               title="Everything Ascending - go to page for this track"
       style="background-color:#050608;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Snow Palms - search Hype Machine for this artist"
               href="/artist/Snow+Palms">Snow Palms</a><span class="divider"> - </span>        <a class="track" title="Everything Ascending - go to page for this track"
           href="/track/2tnhf/Snow+Palms+-+Everything+Ascending">
            <span class="base-title">Everything Ascending</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2tnhf&text=Snow+Palms+-+Everything+Ascending%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2tnhf&title=Snow+Palms+-+Everything+Ascending"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2tnhf" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 523"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2tnhf"
                   href="">523                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2tnhf"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 4 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2tnhf">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/4ERwsYrHID5aJItr1C9Lwd">Spotify</a>
            
                             &bull;                 <a rel="nofollow"
                          href="/go/itunes_web/everything-ascending%2F1416836043%3Fi%3D1416836327?entity=album">Apple Music</a>
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/a+closer+listen/20537">a closer listen</a><a
                            class="follow-pill fav_site_20537 follow"
                            onclick="toggleFavoriteBlog('20537');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;When it came time to tally our votes, we discovered that this year’s winners had never&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://acloserlisten.com/2019/12/11/acl-2019-the-years-best-labels/"
                            title="10 Dec 2019 - 6:01 PM CST">

                             on Dec 10th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2wq1r" id="section-track-2wq1r"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Nov 12th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2wq1r/Andy+Stott+-+Versi"
               title="Versi - go to page for this track"
       style="background-color:#E1E3DE;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Andy Stott - search Hype Machine for this artist"
               href="/artist/Andy+Stott">Andy Stott</a><span class="divider"> - </span>        <a class="track" title="Versi - go to page for this track"
           href="/track/2wq1r/Andy+Stott+-+Versi">
            <span class="base-title">Versi</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wq1r&text=Andy+Stott+-+Versi%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wq1r&title=Andy+Stott+-+Versi"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2wq1r" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 624"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2wq1r"
                   href="">624                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2wq1r"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 14 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2wq1r">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/0BXzLyIdYDtG4Nv0ddyB93">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/burl+veneer%27s+music+tumblr/17867">Burl Veneer's Music Tumblr</a><a
                            class="follow-pill fav_site_17867 follow"
                            onclick="toggleFavoriteBlog('17867');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Andy Stott - Versi (modernlove) Taken from ‘It Should Be Us’, Andy Stott’s first release since&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://burlveneer-music.tumblr.com/post/189570456455/andy-stott-versi-modernlove-taken-from-it"
                            title="9 Dec 2019 - 6:23 AM CST">

                             on Dec 9th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2wmyb" id="section-track-2wmyb"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Nov 12th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2wmyb/MAGDALENA+BAY+-+Killshot"
               title="Killshot - go to page for this track"
       style="background-color:#E6C941;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="MAGDALENA BAY - search Hype Machine for this artist"
               href="/artist/MAGDALENA+BAY">MAGDALENA BAY</a><span class="divider"> - </span>        <a class="track" title="Killshot - go to page for this track"
           href="/track/2wmyb/MAGDALENA+BAY+-+Killshot">
            <span class="base-title">Killshot</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wmyb&text=MAGDALENA+BAY+-+Killshot%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wmyb&title=MAGDALENA+BAY+-+Killshot"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2wmyb" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 661"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2wmyb"
                   href="">661                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2wmyb"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 6 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2wmyb">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/0LJTfmgOMvlLd0u4HU9twm">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/we+all+want+someone+to+shout+for/6764">We All Want Someone To Shout For</a><a
                            class="follow-pill fav_site_6764 follow"
                            onclick="toggleFavoriteBlog('6764');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Photos by Matt Esposito Los Angeles pop duo Magdalena Bay will release their new EP A&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://weallwantsomeone.org/2020/01/24/photos-magdalena-bay-at-elsewhere-zone-one-january-15-2020/"
                            title="24 Jan 2020 - 4:56 PM CST">

                             on Jan 24th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2wj89" id="section-track-2wj89"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Oct 31st, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2wj89/Calper+x+Son+of+Cabe+-+Crowd"
               title="Crowd - go to page for this track"
       style="background-color:#9C6234;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Calper x Son of Cabe - search Hype Machine for this artist"
               href="/artist/Calper+x+Son+of+Cabe">Calper x Son of Cabe</a><span class="divider"> - </span>        <a class="track" title="Crowd - go to page for this track"
           href="/track/2wj89/Calper+x+Son+of+Cabe+-+Crowd">
            <span class="base-title">Crowd</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wj89&text=Calper+x+Son+of+Cabe+-+Crowd%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wj89&title=Calper+x+Son+of+Cabe+-+Crowd"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2wj89" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 348"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2wj89"
                   href="">348                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2wj89"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 9 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2wj89">SoundCloud</a> 
        
            </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/acid+stag/17657">acid stag</a><a
                            class="follow-pill fav_site_17657 follow"
                            onclick="toggleFavoriteBlog('17657');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;The soundtrack for those gloriously chilled Sunday moments ❄❄ The post Sunday Chills #202 appeared first&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://acidstag.com/2019/11/sunday-chills-202/"
                            title="2 Nov 2019 - 4:00 PM CST">

                             on Nov 2nd, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2v3a5" id="section-track-2v3a5"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Oct 18th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2v3a5/Saeyers+-+You"
               title="You - go to page for this track"
       style="background-color:#A08960;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Saeyers - search Hype Machine for this artist"
               href="/artist/Saeyers">Saeyers</a><span class="divider"> - </span>        <a class="track" title="You - go to page for this track"
           href="/track/2v3a5/Saeyers+-+You">
            <span class="base-title">You</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2v3a5&text=Saeyers+-+You%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2v3a5&title=Saeyers+-+You"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2v3a5" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 393"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2v3a5"
                   href="">393                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2v3a5"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 8 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2v3a5">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/04PNoyAVLyO4x5NpBZafB4">Spotify</a>
            
                             &bull;                 <a rel="nofollow"
                          href="/go/itunes_web/you%2F1458485842%3Fi%3D1458485845?entity=album">Apple Music</a>
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/ear+tapas/23287">ear tapas</a><a
                            class="follow-pill fav_site_23287 follow"
                            onclick="toggleFavoriteBlog('23287');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Right off the bat this track cuts to the chase with dreamy guitars and bouncy grooves.&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://eartapas.tumblr.com/post/188414244443/right-off-the-bat-this-track-cuts-to-the-chase"
                            title="17 Oct 2019 - 4:41 PM CST">

                             on Oct 17th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2wfgv" id="section-track-2wfgv"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Oct 15th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2wfgv/Nature+TV+-+She+Wants+To+See+You+Cry"
               title="She Wants To See You Cry - go to page for this track"
       style="background-color:#FEA638;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Nature TV - search Hype Machine for this artist"
               href="/artist/Nature+TV">Nature TV</a><span class="divider"> - </span>        <a class="track" title="She Wants To See You Cry - go to page for this track"
           href="/track/2wfgv/Nature+TV+-+She+Wants+To+See+You+Cry">
            <span class="base-title">She Wants To See You Cry</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wfgv&text=Nature+TV+-+She+Wants+To+See+You+Cry%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wfgv&title=Nature+TV+-+She+Wants+To+See+You+Cry"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2wfgv" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 370"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2wfgv"
                   href="">370                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2wfgv"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 13 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2wfgv">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/3REso3eKtF8pGZWlFOuxre">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/when+the+horn+blows/22830">When The Horn Blows</a><a
                            class="follow-pill fav_site_22830 follow"
                            onclick="toggleFavoriteBlog('22830');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Brighton’s very own Nature TV released their impressive ‘Emotion Sickness EP’ last month, the band took&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://whenthehornblows.com/content/2019/12/16/track-by-track-nature-tv-emotion-sickness-ep"
                            title="16 Dec 2019 - 4:24 PM CST">

                             on Dec 16th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2wgnh" id="section-track-2wgnh"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Oct 15th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2wgnh/Tomas+Novoa+-+Ci%C3%A9naga"
               title="Ci&eacute;naga - go to page for this track"
       style="background-color:#005189;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Tomas Novoa - search Hype Machine for this artist"
               href="/artist/Tomas+Novoa">Tomas Novoa</a><span class="divider"> - </span>        <a class="track" title="Ci&eacute;naga - go to page for this track"
           href="/track/2wgnh/Tomas+Novoa+-+Ci%C3%A9naga">
            <span class="base-title">Ciénaga</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wgnh&text=Tomas+Novoa+-+Ci%C3%A9naga%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wgnh&title=Tomas+Novoa+-+Ci%C3%A9naga"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2wgnh" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 468"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2wgnh"
                   href="">468                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2wgnh"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 3 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2wgnh">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/1TCnbwslRkzG7kqgx2Kaj3">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/faeton+music+blog/21511">Faeton Music Blog</a><a
                            class="follow-pill fav_site_21511 follow"
                            onclick="toggleFavoriteBlog('21511');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Good morning As usual, after a weekend we all need some time to make step into&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://www.faetonmusic.com/2019/10/tomas-novoa-cienaga-2019/"
                            title="14 Oct 2019 - 2:42 AM CST">

                             on Oct 14th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2we5k" id="section-track-2we5k"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Oct 8th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2we5k/Flume+-+Let+You+Know+feat.+London+Grammar+%28Robin+Hannibal+Rework%29"
               title="Let You Know feat. London Grammar (Robin Hannibal Rework) - go to page for this track"
       style="background-color:#01FFFF;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Flume - search Hype Machine for this artist"
               href="/artist/Flume">Flume</a><span class="divider"> - </span>        <a class="track" title="Let You Know feat. London Grammar (Robin Hannibal Rework) - go to page for this track"
           href="/track/2we5k/Flume+-+Let+You+Know+feat.+London+Grammar+%28Robin+Hannibal+Rework%29">
            <span class="base-title">Let You Know feat. London Grammar</span> <span class="remix-link">Robin Hannibal Rework</span>         </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2we5k&text=Flume+-+Let+You+Know+feat.+London+Grammar+%28Robin+Hannibal+Rework%29%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2we5k&title=Flume+-+Let+You+Know+feat.+London+Grammar+%28Robin+Hannibal+Rework%29"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2we5k" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 576"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2we5k"
                   href="">576                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2we5k"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 2 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2we5k">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/6ZkVGDZSgoGSvBA4LUzzaW">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/groovilant/23164">Groovilant</a><a
                            class="follow-pill fav_site_23164 follow"
                            onclick="toggleFavoriteBlog('23164');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;The Weekly Surprise is back – hopefully able to keep it up every week! We start&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://groovilant.com/the-weekly-surprise-003/"
                            title="7 Oct 2019 - 2:02 PM CST">

                             on Oct 7th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2wcnk" id="section-track-2wcnk"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Oct 7th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2wcnk/Calcou+-+Zeitgeist+%28feat.+Bastien%29"
               title="Zeitgeist (feat. Bastien) - go to page for this track"
       style="background-color:#D4D6D5;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Calcou - search Hype Machine for this artist"
               href="/artist/Calcou">Calcou</a><span class="divider"> - </span>        <a class="track" title="Zeitgeist (feat. Bastien) - go to page for this track"
           href="/track/2wcnk/Calcou+-+Zeitgeist+%28feat.+Bastien%29">
            <span class="base-title">Zeitgeist (feat. Bastien)</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wcnk&text=Calcou+-+Zeitgeist+%28feat.+Bastien%29%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2wcnk&title=Calcou+-+Zeitgeist+%28feat.+Bastien%29"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2wcnk" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 587"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2wcnk"
                   href="">587                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2wcnk"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 5 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2wcnk">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/7gaIkyQxjefa0D7JruFMOz">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/le+visiteur/22656">Le Visiteur</a><a
                            class="follow-pill fav_site_22656 follow"
                            onclick="toggleFavoriteBlog('22656');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Calcou – Zeitgeist (feat. Bastien) Deep and smooth yet deceptively energetic. Zeitgeist is the brand new&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://levisiteuronline.com/music/calcou-zeitgeist-feat-bastien-2/"
                            title="7 Oct 2019 - 4:08 AM CST">

                             on Oct 7th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2vbtb" id="section-track-2vbtb"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Oct 6th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2vbtb/AKA+Lui+-+Hey%21+I+Don%27t+Want+That+Anyway"
               title="Hey! I Don't Want That Anyway - go to page for this track"
       style="background-color:#52EAFF;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="AKA Lui - search Hype Machine for this artist"
               href="/artist/AKA+Lui">AKA Lui</a><span class="divider"> - </span>        <a class="track" title="Hey! I Don't Want That Anyway - go to page for this track"
           href="/track/2vbtb/AKA+Lui+-+Hey%21+I+Don%27t+Want+That+Anyway">
            <span class="base-title">Hey! I Don't Want That Anyway</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vbtb&text=AKA+Lui+-+Hey%21+I+Don%27t+Want+That+Anyway%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vbtb&title=AKA+Lui+-+Hey%21+I+Don%27t+Want+That+Anyway"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2vbtb" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 1.6K"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2vbtb"
                   href="">1.6K                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2vbtb"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 10 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2vbtb">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/2Orge4IMIiIgvOQfNg33WA">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/acid+stag/17657">acid stag</a><a
                            class="follow-pill fav_site_17657 follow"
                            onclick="toggleFavoriteBlog('17657');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Shining a spotlight on some of the hard working people “Behind The Music”&rdquo;
                        <a
                            class="readpost"
                            href="https://acidstag.com/2019/10/btm-rob-carroll-of-good-intent/"
                            title="3 Oct 2019 - 7:09 PM CST">

                             on Oct 3rd, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2watz" id="section-track-2watz"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Sep 26th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2watz/MONOGEM+-+Soy+Lo+Que+Soy"
               title="Soy Lo Que Soy - go to page for this track"
       style="background-color:#EA8557;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="MONOGEM - search Hype Machine for this artist"
               href="/artist/MONOGEM">MONOGEM</a><span class="divider"> - </span>        <a class="track" title="Soy Lo Que Soy - go to page for this track"
           href="/track/2watz/MONOGEM+-+Soy+Lo+Que+Soy">
            <span class="base-title">Soy Lo Que Soy</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2watz&text=MONOGEM+-+Soy+Lo+Que+Soy%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2watz&title=MONOGEM+-+Soy+Lo+Que+Soy"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2watz" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 1.4K"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2watz"
                   href="">1.4K                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2watz"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 14 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2watz">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/2NooozzLR6L6IjLGdCOEqh">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/acid+stag/17657">acid stag</a><a
                            class="follow-pill fav_site_17657 follow"
                            onclick="toggleFavoriteBlog('17657');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;A gender-based series showcasing some very talented solo humans!&rdquo;
                        <a
                            class="readpost"
                            href="https://acidstag.com/2019/10/lets-hear-it-for-thegirls-v117/"
                            title="23 Oct 2019 - 12:32 AM CST">

                             on Oct 23rd, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2w8sh" id="section-track-2w8sh"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Sep 25th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2w8sh/Blue+Material+-+Personal"
               title="Personal - go to page for this track"
       style="background-color:#D0A149;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Blue Material - search Hype Machine for this artist"
               href="/artist/Blue+Material">Blue Material</a><span class="divider"> - </span>        <a class="track" title="Personal - go to page for this track"
           href="/track/2w8sh/Blue+Material+-+Personal">
            <span class="base-title">Personal</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w8sh&text=Blue+Material+-+Personal%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w8sh&title=Blue+Material+-+Personal"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2w8sh" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 559"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2w8sh"
                   href="">559                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2w8sh"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 9 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2w8sh">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/08FefK6TTh7nYc8Msz3QAe">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/record+turnover/24596">Record Turnover</a><a
                            class="follow-pill fav_site_24596 follow"
                            onclick="toggleFavoriteBlog('24596');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Blue Material’s self-titled mini-album that came out in April is some of the best lo-fi dance&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://www.recordturnover.com/2019/12/14/blue-material/"
                            title="14 Dec 2019 - 4:45 PM CST">

                             on Dec 14th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2sw1d" id="section-track-2sw1d"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Sep 6th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2sw1d/Jesse+Jo+Stark+Music+-+Mystery"
               title="Mystery - go to page for this track"
       style="background-color:#DACB34;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Jesse Jo Stark Music - search Hype Machine for this artist"
               href="/artist/Jesse+Jo+Stark+Music">Jesse Jo Stark Music</a><span class="divider"> - </span>        <a class="track" title="Mystery - go to page for this track"
           href="/track/2sw1d/Jesse+Jo+Stark+Music+-+Mystery">
            <span class="base-title">Mystery</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2sw1d&text=Jesse+Jo+Stark+Music+-+Mystery%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2sw1d&title=Jesse+Jo+Stark+Music+-+Mystery"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2sw1d" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 661"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2sw1d"
                   href="">661                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2sw1d"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 11 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2sw1d">SoundCloud</a> 
        
            </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/dead+horse+march/17117">Dead Horse March</a><a
                            class="follow-pill fav_site_17117 follow"
                            onclick="toggleFavoriteBlog('17117');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Jesse Jo Stark’s “Lady Bird” is off the 2019 album Lady Bird. You can learn more&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="http://www.deadhorsemarch.com/jesse-jo-stark-lady-bird/"
                            title="4 Sep 2019 - 6:00 AM CST">

                             on Sep 4th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2vy14" id="section-track-2vy14"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Sep 2nd, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2vy14/Ora+The+Molecule+-+Sale%CC%81"
               title="Salé - go to page for this track"
       style="background-color:#000000;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Ora The Molecule - search Hype Machine for this artist"
               href="/artist/Ora+The+Molecule">Ora The Molecule</a><span class="divider"> - </span>        <a class="track" title="Salé - go to page for this track"
           href="/track/2vy14/Ora+The+Molecule+-+Sale%CC%81">
            <span class="base-title">Salé</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vy14&text=Ora+The+Molecule+-+Sale%CC%81%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vy14&title=Ora+The+Molecule+-+Sale%CC%81"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2vy14" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 172"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2vy14"
                   href="">172                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2vy14"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 4 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2vy14">SoundCloud</a> 
        
            </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/the+burning+ear/10819">The Burning Ear</a><a
                            class="follow-pill fav_site_10819 follow"
                            onclick="toggleFavoriteBlog('10819');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            
                        <a
                            class="readpost"
                            href="https://www.theburningear.com/ora-the-molecule-sale/"
                            title="30 Aug 2019 - 6:20 PM CST">

                             on Aug 30th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2tw99" id="section-track-2tw99"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Sep 1st, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2tw99/SAULT+-+Don%27t+Waste+My+Time"
               title="Don't Waste My Time - go to page for this track"
       style="background-color:#00C552;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="SAULT - search Hype Machine for this artist"
               href="/artist/SAULT">SAULT</a><span class="divider"> - </span>        <a class="track" title="Don't Waste My Time - go to page for this track"
           href="/track/2tw99/SAULT+-+Don%27t+Waste+My+Time">
            <span class="base-title">Don't Waste My Time</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2tw99&text=SAULT+-+Don%27t+Waste+My+Time%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2tw99&title=SAULT+-+Don%27t+Waste+My+Time"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2tw99" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 314"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2tw99"
                   href="">314                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2tw99"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 6 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2tw99">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/70tAM9TN7ryjB0gPGOjS7l">Spotify</a>
            
                             &bull;                 <a rel="nofollow"
                          href="/go/itunes_web/dont-waste-my-time%2F1454807294%3Fi%3D1454807297?entity=album">Apple Music</a>
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/the+tape+deck/24696">The Tape Deck</a><a
                            class="follow-pill fav_site_24696 follow"
                            onclick="toggleFavoriteBlog('24696');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;SAULT’s two albums from 2019 are universally-enjoyable, funky post-genre bops designed for a wider audience in&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://tapedeckpodcast.com/spectreview-sault-5-7/"
                            title="6 Jan 2020 - 2:00 AM CST">

                             on Jan 6th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2w11p" id="section-track-2w11p"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Sep 1st, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2w11p/Monster+Rally+-+Sister+Owls"
               title="Sister Owls - go to page for this track"
       style="background-color:#4DB1C9;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Monster Rally - search Hype Machine for this artist"
               href="/artist/Monster+Rally">Monster Rally</a><span class="divider"> - </span>        <a class="track" title="Sister Owls - go to page for this track"
           href="/track/2w11p/Monster+Rally+-+Sister+Owls">
            <span class="base-title">Sister Owls</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w11p&text=Monster+Rally+-+Sister+Owls%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w11p&title=Monster+Rally+-+Sister+Owls"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2w11p" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 527"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2w11p"
                   href="">527                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2w11p"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 5 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2w11p">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/7wXrfLkVdRtqdFHlM8zBoa">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/the+new+lofi/15524">The New LoFi</a><a
                            class="follow-pill fav_site_15524 follow"
                            onclick="toggleFavoriteBlog('15524');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Ted Feighan is the multi-talented artist behind LA-based outfit, Monster Rally. For his latest full length&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="http://www.thenewlofi.com/2019/10/adventures-on-the-floating-island-ted-feighan-releases-his-new-album-as-a-mango-colored-pinwheel-vinyl/"
                            title="13 Oct 2019 - 2:00 AM CST">

                             on Oct 13th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2w46z" id="section-track-2w46z"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Sep 1st, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2w46z/Ghost+Funk+Orchestra+-+Walk+Like+A+Motherfucker"
               title="Walk Like A Motherfucker - go to page for this track"
       style="background-color:#E1E1E1;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Ghost Funk Orchestra - search Hype Machine for this artist"
               href="/artist/Ghost+Funk+Orchestra">Ghost Funk Orchestra</a><span class="divider"> - </span>        <a class="track" title="Walk Like A Motherfucker - go to page for this track"
           href="/track/2w46z/Ghost+Funk+Orchestra+-+Walk+Like+A+Motherfucker">
            <span class="base-title">Walk Like A Motherfucker</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w46z&text=Ghost+Funk+Orchestra+-+Walk+Like+A+Motherfucker%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w46z&title=Ghost+Funk+Orchestra+-+Walk+Like+A+Motherfucker"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2w46z" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 548"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2w46z"
                   href="">548                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2w46z"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 10 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2w46z">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/7zlotF0dxQZQILImy7jXbw">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/post+trash/23560">Post-Trash</a><a
                            class="follow-pill fav_site_23560 follow"
                            onclick="toggleFavoriteBlog('23560');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;by Shane O'Malley Firek In this day and age, a soul “revival” may come across as&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="http://post-trash.com/news/2020/2/19/ghost-funk-orchestra-a-song-for-paul-album-review"
                            title="19 Feb 2020 - 12:36 AM CST">

                             on Feb 19th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2vyxt" id="section-track-2vyxt"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Sep 1st, 2019</div>

<div class="stack-featured"><a href="/stack/246" title="This track featured in Stack №246, our music newsletter">Stack №246</a></div>


<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2vyxt/Nina+Keith+-+In+The+Woods+We+Both+Saw+It%2C+Weren%27t+Dreaming"
               title="In The Woods We Both Saw It, Weren't Dreaming - go to page for this track"
       style="background-color:#EC3338;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Nina Keith - search Hype Machine for this artist"
               href="/artist/Nina+Keith">Nina Keith</a><span class="divider"> - </span>        <a class="track" title="In The Woods We Both Saw It, Weren't Dreaming - go to page for this track"
           href="/track/2vyxt/Nina+Keith+-+In+The+Woods+We+Both+Saw+It%2C+Weren%27t+Dreaming">
            <span class="base-title">In The Woods We Both Saw It, Weren't Dreaming</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vyxt&text=Nina+Keith+-+In+The+Woods+We+Both+Saw+It%2C+Weren%27t+Dreaming%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vyxt&title=Nina+Keith+-+In+The+Woods+We+Both+Saw+It%2C+Weren%27t+Dreaming"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2vyxt" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 194"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2vyxt"
                   href="">194                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2vyxt"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 6 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2vyxt">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/1WuwWlJuXMFbJTay3wS9Ow">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/stadiums++shrines/13575">Stadiums & Shrines</a><a
                            class="follow-pill fav_site_13575 follow"
                            onclick="toggleFavoriteBlog('13575');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;In lieu of lists, I’ll start Episode 73 by saying that my favorite album of 2019&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://stadiumsandshrines.com/e73-nina-keith/"
                            title="23 Dec 2019 - 11:18 AM CST">

                             on Dec 23rd, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2w46e" id="section-track-2w46e"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Sep 1st, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2w46e/Michi+-+Still+Feel+U"
               title="Still Feel U - go to page for this track"
       style="background-color:#7E551D;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Michi - search Hype Machine for this artist"
               href="/artist/Michi">Michi</a><span class="divider"> - </span>        <a class="track" title="Still Feel U - go to page for this track"
           href="/track/2w46e/Michi+-+Still+Feel+U">
            <span class="base-title">Still Feel U</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w46e&text=Michi+-+Still+Feel+U%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w46e&title=Michi+-+Still+Feel+U"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2w46e" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 503"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2w46e"
                   href="">503                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2w46e"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 9 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2w46e">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/5SyqNu9Ds3fy5Cl6yrAb0v">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/buzzbands+la/12655">Buzzbands.LA</a><a
                            class="follow-pill fav_site_12655 follow"
                            onclick="toggleFavoriteBlog('12655');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Singer-songwriter Michelle Guerrero unveiled her solo project Michi last year. Working with producer Jake Munk, Michi&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://buzzbands.la/2020/03/18/ears-wide-open-michi/"
                            title="18 Mar 2020 - 2:09 PM CST">

                             on Mar 18th&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2w4m9" id="section-track-2w4m9"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Aug 28th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2w4m9/Cabu+-+Signs+%28Feat.+Vanessa+Elisha%29"
               title="Signs (Feat. Vanessa Elisha) - go to page for this track"
       style="background-color:#E63444;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Cabu - search Hype Machine for this artist"
               href="/artist/Cabu">Cabu</a><span class="divider"> - </span>        <a class="track" title="Signs (Feat. Vanessa Elisha) - go to page for this track"
           href="/track/2w4m9/Cabu+-+Signs+%28Feat.+Vanessa+Elisha%29">
            <span class="base-title">Signs (Feat. Vanessa Elisha)</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w4m9&text=Cabu+-+Signs+%28Feat.+Vanessa+Elisha%29%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w4m9&title=Cabu+-+Signs+%28Feat.+Vanessa+Elisha%29"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2w4m9" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 128"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2w4m9"
                   href="">128                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2w4m9"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 2 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2w4m9">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/04698nAWskvusZz79n3AUy">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/acid+stag/17657">acid stag</a><a
                            class="follow-pill fav_site_17657 follow"
                            onclick="toggleFavoriteBlog('17657');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Filipino-Australian producer Cabu returns returns with a feel good jam alongside Vanessa Elisha.&rdquo;
                        <a
                            class="readpost"
                            href="https://acidstag.com/2019/08/cabu-signs-feat-vanessa-elisha/"
                            title="25 Aug 2019 - 8:00 PM CST">

                             on Aug 25th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2vpvs" id="section-track-2vpvs"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Aug 28th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2vpvs/MONOGEM+-+So+Many+Ways"
               title="So Many Ways - go to page for this track"
       style="background-color:#E9212C;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="MONOGEM - search Hype Machine for this artist"
               href="/artist/MONOGEM">MONOGEM</a><span class="divider"> - </span>        <a class="track" title="So Many Ways - go to page for this track"
           href="/track/2vpvs/MONOGEM+-+So+Many+Ways">
            <span class="base-title">So Many Ways</span> <span class="remix-count"> +1&nbsp;remix</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vpvs&text=MONOGEM+-+So+Many+Ways%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vpvs&title=MONOGEM+-+So+Many+Ways"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2vpvs" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 456"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2vpvs"
                   href="">456                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2vpvs"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 11 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2vpvs">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/1E4xmOlJ26yZvvjs8KNlYL">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/at+cost+magazine/22590">At Cost Magazine</a><a
                            class="follow-pill fav_site_22590 follow"
                            onclick="toggleFavoriteBlog('22590');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;The first track en español for MONOGEM’s Jen Hirsch, “Soy lo que soy” is an anthem&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://atcostmag.tumblr.com/post/188024814978/monogem-soy-lo-que-soy"
                            title="29 Sep 2019 - 11:49 AM CST">

                             on Sep 29th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2w2vz" id="section-track-2w2vz"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Aug 22nd, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2w2vz/Big+Gigantic+-+Friends+%28feat.+Ashe%29"
               title="Friends (feat. Ashe) - go to page for this track"
       style="background-color:#E9212C;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Big Gigantic - search Hype Machine for this artist"
               href="/artist/Big+Gigantic">Big Gigantic</a><span class="divider"> - </span>        <a class="track" title="Friends (feat. Ashe) - go to page for this track"
           href="/track/2w2vz/Big+Gigantic+-+Friends+%28feat.+Ashe%29">
            <span class="base-title">Friends (feat. Ashe)</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w2vz&text=Big+Gigantic+-+Friends+%28feat.+Ashe%29%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w2vz&title=Big+Gigantic+-+Friends+%28feat.+Ashe%29"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2w2vz" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 736"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2w2vz"
                   href="">736                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2w2vz"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 5 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2w2vz">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/67J01Vb3WHz7QuuBriVdJQ">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/music+you+wanna+listen+to/17406">Music You Wanna Listen To</a><a
                            class="follow-pill fav_site_17406 follow"
                            onclick="toggleFavoriteBlog('17406');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Big Gigantic has over the years become a household name in the electronic music scene, however&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="http://musicyouwannalistento.blogspot.com/2019/08/friends.html"
                            title="26 Aug 2019 - 11:16 AM CST">

                             on Aug 26th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2w2mt" id="section-track-2w2mt"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Aug 22nd, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2w2mt/Admin+-+Adjust+Your+Love"
               title="Adjust Your Love - go to page for this track"
       style="background-color:#7DD0E0;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Admin - search Hype Machine for this artist"
               href="/artist/Admin">Admin</a><span class="divider"> - </span>        <a class="track" title="Adjust Your Love - go to page for this track"
           href="/track/2w2mt/Admin+-+Adjust+Your+Love">
            <span class="base-title">Adjust Your Love</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w2mt&text=Admin+-+Adjust+Your+Love%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w2mt&title=Admin+-+Adjust+Your+Love"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2w2mt" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 76"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2w2mt"
                   href="">76                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2w2mt"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 2 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2w2mt">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/5OtBpL60yVz5WryHIyr1sf">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/house+of+lords/22061">House of Lords</a><a
                            class="follow-pill fav_site_22061 follow"
                            onclick="toggleFavoriteBlog('22061');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Smooth track from an artist going by the name Admin out of the Better Listen camp!&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="http://houseoflords.xyz/admin-adjust-love/"
                            title="19 Aug 2019 - 5:59 PM CST">

                             on Aug 19th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2w292" id="section-track-2w292"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Aug 22nd, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2w292/MAGDALENA+BAY+-+Venice"
               title="Venice - go to page for this track"
       style="background-color:#99DDDC;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="MAGDALENA BAY - search Hype Machine for this artist"
               href="/artist/MAGDALENA+BAY">MAGDALENA BAY</a><span class="divider"> - </span>        <a class="track" title="Venice - go to page for this track"
           href="/track/2w292/MAGDALENA+BAY+-+Venice">
            <span class="base-title">Venice</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w292&text=MAGDALENA+BAY+-+Venice%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2w292&title=MAGDALENA+BAY+-+Venice"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2w292" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 568"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2w292"
                   href="">568                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2w292"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 8 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2w292">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/0UsgQElSurvhKAuosIcIT1">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/at+cost+magazine/22590">At Cost Magazine</a><a
                            class="follow-pill fav_site_22590 follow"
                            onclick="toggleFavoriteBlog('22590');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;“Venice” is the latest number from Californians Mica Tenenbaum and Matthew Lewin, a breezy, sun-kissed chant&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://atcostmag.tumblr.com/post/187496741108/magdalena-bay-venice"
                            title="4 Sep 2019 - 4:40 PM CST">

                             on Sep 4th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2vwyx" id="section-track-2vwyx"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Aug 14th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2vwyx/MUNYA+-+Dove"
               title="Dove - go to page for this track"
       style="background-color:#F68780;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="MUNYA - search Hype Machine for this artist"
               href="/artist/MUNYA">MUNYA</a><span class="divider"> - </span>        <a class="track" title="Dove - go to page for this track"
           href="/track/2vwyx/MUNYA+-+Dove">
            <span class="base-title">Dove</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vwyx&text=MUNYA+-+Dove%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vwyx&title=MUNYA+-+Dove"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2vwyx" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 290"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2vwyx"
                   href="">290                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2vwyx"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 7 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2vwyx">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/5ZkfSkIA4Z9hUjVGZQVbP0">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/music+islands/21246">music islands</a><a
                            class="follow-pill fav_site_21246 follow"
                            onclick="toggleFavoriteBlog('21246');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;ことしよく聞こえてきた、モントリオールのムニャさん というか、よく聞いたムニャさん。（滝沢カレンのようにしか見えない） 夏のころのシングル、ベンジャミン。 Munya – Benjamin MUNYA – dove 春先にデビューしたころの曲のほうが好きで なにげに耳にこびりついてしかたがない。 MUNYA – Hotel Delmano&rdquo;
                        <a
                            class="readpost"
                            href="https://yamamiya.wordpress.com/2019/12/09/munya-2/"
                            title="8 Dec 2019 - 8:03 PM CST">

                             on Dec 8th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2e03w" id="section-track-2e03w"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Aug 7th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2e03w/Khruangbin+-+Two+Fish+and+an+Elephant"
               title="Two Fish and an Elephant - go to page for this track"
       style="background-color:#FF006B;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Khruangbin - search Hype Machine for this artist"
               href="/artist/Khruangbin">Khruangbin</a><span class="divider"> - </span>        <a class="track" title="Two Fish and an Elephant - go to page for this track"
           href="/track/2e03w/Khruangbin+-+Two+Fish+and+an+Elephant">
            <span class="base-title">Two Fish and an Elephant</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2e03w&text=Khruangbin+-+Two+Fish+and+an+Elephant%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2e03w&title=Khruangbin+-+Two+Fish+and+an+Elephant"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2e03w" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 860"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2e03w"
                   href="">860                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2e03w"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 7 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2e03w">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/2kGMBOPXMtb9gxzVYdplg9">Spotify</a>
            
                             &bull;                 <a rel="nofollow"
                          href="/go/itunes_web/two-fish-and-an-elephant%2Fid1032867881%3Fi%3D1032867888?entity=album">Apple Music</a>
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/silence+nogood/13271">Silence Nogood</a><a
                            class="follow-pill fav_site_13271 follow"
                            onclick="toggleFavoriteBlog('13271');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Illustration by Sasha Barr I’ve already covered Khruangbin back in 2017 at Outside Lands, but they’ve&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="http://silencenogood.net/khruangbin-sex-on-stage/"
                            title="4 Aug 2019 - 5:16 PM CST">

                             on Aug 4th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2vqq9" id="section-track-2vqq9"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Jul 8th, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2vqq9/Bell+Biv+Devoe+-+Poison+%28Lisbona+Sisters+%26+Justin+Jay%27s+New+Edition%29"
               title="Poison (Lisbona Sisters &amp; Justin Jay's New Edition) - go to page for this track"
       style="background-color:#07634C;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Bell Biv Devoe - search Hype Machine for this artist"
               href="/artist/Bell+Biv+Devoe">Bell Biv Devoe</a><span class="divider"> - </span>        <a class="track" title="Poison (Lisbona Sisters &amp; Justin Jay's New Edition) - go to page for this track"
           href="/track/2vqq9/Bell+Biv+Devoe+-+Poison+%28Lisbona+Sisters+%26+Justin+Jay%27s+New+Edition%29">
            <span class="base-title">Poison</span> <span class="remix-link">Lisbona Sisters & Justin Jay's New Edition</span> <span class="remix-count"> +9&nbsp;more</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vqq9&text=Bell+Biv+Devoe+-+Poison+%28Lisbona+Sisters+%26+Justin+Jay%27s+New+Edition%29%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vqq9&title=Bell+Biv+Devoe+-+Poison+%28Lisbona+Sisters+%26+Justin+Jay%27s+New+Edition%29"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2vqq9" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 159"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2vqq9"
                   href="">159                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2vqq9"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 2 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2vqq9">SoundCloud</a> 
        
            </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/acid+stag/17657">acid stag</a><a
                            class="follow-pill fav_site_17657 follow"
                            onclick="toggleFavoriteBlog('17657');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;Thrust your hips to these saucy remixes 🎶🎶&rdquo;
                        <a
                            class="readpost"
                            href="https://acidstag.com/2019/07/remix-this-186/"
                            title="5 Jul 2019 - 5:00 PM CST">

                             on Jul 5th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2vprw" id="section-track-2vprw"
     class="section section-track haarp-section-track  even"  >




<div class="track-info">Loved on Jul 1st, 2019</div>

<div class="stack-featured"><a href="/stack/238" title="This track featured in Stack №238, our music newsletter">Stack №238</a></div>


<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2vprw/Grebes+-+wyd"
               title="wyd - go to page for this track"
       style="background-color:#002182;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Grebes - search Hype Machine for this artist"
               href="/artist/Grebes">Grebes</a><span class="divider"> - </span>        <a class="track" title="wyd - go to page for this track"
           href="/track/2vprw/Grebes+-+wyd">
            <span class="base-title">wyd</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vprw&text=Grebes+-+wyd%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vprw&title=Grebes+-+wyd"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2vprw" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 115"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2vprw"
                   href="">115                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2vprw"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 1 site</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/bc/2vprw">Bandcamp</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/2Ev3tTpZzvpqW8pbj3nDlR">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/dimestore+saints/22023">dimestore saints</a><a
                            class="follow-pill fav_site_22023 follow"
                            onclick="toggleFavoriteBlog('22023');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;jacob underleiger has created an aural companion for late nights of solitude. Read more grebes –&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://dimestoresaints.blog/2019/06/28/grebes-house-creature/"
                            title="28 Jun 2019 - 7:15 AM CST">

                             on Jun 28th, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->


<div data-itemid="2vp6f" id="section-track-2vp6f"
     class="section section-track haarp-section-track  odd"  >




<div class="track-info">Loved on Jul 1st, 2019</div>



<div class="playlist-ctrls playlist-off">
    <a data-playlist-id="3" title="Weird" class="haarp-playlist-ctrl playlist-3 playlist-option " href=""></a>
    <a data-playlist-id="2" title="Down" class="haarp-playlist-ctrl playlist-2 playlist-option " href=""></a>
    <a data-playlist-id="1" title="Up" class="haarp-playlist-ctrl playlist-1 playlist-option " href=""></a>
    <a class="playlist-selected " href=""></a>
</div>

<div class="section-player">




    <a class="thumb"
                    href="/track/2vp6f/Kalaido+-+Motorbikes+In+Sapa"
               title="Motorbikes In Sapa - go to page for this track"
       style="background-color:#A35E4F;">
    </a>

<h3 class="track_name">
    
                    <a class="artist" title="Kalaido - search Hype Machine for this artist"
               href="/artist/Kalaido">Kalaido</a><span class="divider"> - </span>        <a class="track" title="Motorbikes In Sapa - go to page for this track"
           href="/track/2vp6f/Kalaido+-+Motorbikes+In+Sapa">
            <span class="base-title">Motorbikes In Sapa</span>        </a>
    

    
</h3>



<span class="share-links">
    <a class="twitter-share icon-twitter fire-share-modal"
       data-href="//hypem.com/share?share_type=twitter&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vp6f&text=Kalaido+-+Motorbikes+In+Sapa%20on%20@hypem&via=hypem"></a>
    <a class="facebook-share icon-facebook fire-share-modal"
       data-href="//hypem.com/share?share_type=facebook&create_type=hypem-player&url=http%3A%2F%2Fhypem.com%2Ftrack%2F2vp6f&title=Kalaido+-+Motorbikes+In+Sapa"></a>
</span>


<ul class="tools">
            <li class="playdiv">
            <a id="play_ctrl_2vp6f" class="play-ctrl play icon-toggle haarp-play-ctrl"
               title="Play"
               href="">
            </a>
        </li>
    
            <li class="favdiv">

                            <a title="Favorited by 801"
                   class="haarp-fav-count toggle-favorites favcount-off"
                   id="favcount_2vp6f"
                   href="">801                </a>
                        <a class="haarp-fav-ctrl icon-heart fav-off"
               id="fav_item_2vp6f"
               title="Favorite"
               href="">
            </a>
        </li>

    
</ul>



<div class="meta">
    <span class="buy">
                        <a href="" class="toggle-reposts">Posted by 3 sites</a>
                </span>

        <span class="download">
            
        &bull;

                    On <a rel="nofollow" href="/go/sc/2vp6f">SoundCloud</a> 
        
                    
            <span class="download-extra">
             &bull;             Also on:

                            <a rel="nofollow" href="/go/spotify_track/4bhRjJyGSpVzNF8A1t46aP">Spotify</a>
            
            
                        </span>

             </span>
    </div>




    
        <p class="post_info">

            
                    
                        <a
                            class="blog-fav-off"
                            title="See other tracks posted by this blog"
                            href="/site/stereofox/19706">Stereofox</a><a
                            class="follow-pill fav_site_19706 follow"
                            onclick="toggleFavoriteBlog('19706');return false;"
                            href="#"><em></em><span>Follow</span></a>

                            &ldquo;If there’s someone that could instantly send you through the mystic fields of the Far East,&hellip;&rdquo;
                        <a
                            class="readpost"
                            href="https://www.stereofox.com/kalaido-motorbikes-in-sapa/"
                            title="1 Jul 2019 - 8:11 AM CST">

                             on Jul 1st, 2019&nbsp;&rarr;

                        </a>
                    
                
        </p>

    
    
    <div class="act_info" style="display:none"></div>
    




</div><!-- section player -->



</div><!-- section track -->

        <div class="paginator infinite">
                    <span class="this-page">1</span><a rel="nofollow" href="/napcae/2/">2</a>         
                    <a href="#" id="infinite-tracks-button">More</a>
                </div>
        
        <script type="text/javascript">
            enable_infinite_page_scroll();
        </script>

    


    


    </div><!-- track-list -->    

    <script type="text/javascript">
    enable_notification_check();    </script>

            <div id="tracks-inject"></div>
    
</div><!-- content-left -->		 

    <script type="application/json" id="displayList-data">
    {"page_cur":"\/napcae","page_num":1,"profile_user":"napcae","tracks":[{"type":"normal","id":"2xbat","time":387,"ts":"1584871576","postid":3732400,"posturl":"https:\/\/groove.de\/2020\/03\/19\/die-platten-der-woche-mit-jasss-luz1e-und-maurice-fulton\/","fav":0,"key":"51378ebfc7a79c72704c509862f10f1a","artist":"Maurice Fulton & Peggy Gou","song":"Jigoo","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:0XQWAVmz1hD1FW13U2nm2r"},{"type":"normal","id":"2w8g5","time":221,"ts":"1584871525","postid":3733492,"posturl":"https:\/\/atcostmag.tumblr.com\/post\/613162860934217728\/lyrah-the-view","fav":0,"key":"318e7eafa5e9683b76ee2daf8d1bbe9b","artist":"Lyrah","song":"Down Low (Penguin Prison Remix)","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:7EzVXXAMEKjriIHERJdAYd"},{"type":"normal","id":"bsg2","time":369,"ts":"1584871138","postid":3733063,"posturl":"http:\/\/www.lostturntable.com\/2020\/03\/20\/madonna-in-the-time-of-coronavirus\/","fav":0,"key":"b2a578e9e1fe20c6c208fd2fb73da30a","artist":"Madonna","song":"Angel (Extended Dance Mix)","is_sc":false,"is_bc":false},{"type":"normal","id":"2xkas","time":198,"ts":"1584870879","postid":3740435,"posturl":"https:\/\/hipdozer.tumblr.com\/post\/614294178222997504\/stereofoxcom-our-friends-at-stereofox-just","fav":0,"key":"a2764bcd93cbc357d4258cf5ccd92c7c","artist":"Imagiro","song":"Until Im Home","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:1UA9mnrucrT9yYOscmw1be"},{"type":"normal","id":"2xhz7","time":196,"ts":"1584870654","postid":3737431,"posturl":"https:\/\/grungecake.com\/sylo-nozra-ginny\/articles\/65073","fav":0,"key":"2801aea7e72739e40dcd7825cfa02f8a","artist":"sylo nozra","song":"Ginny","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:6i5a50hEuC7FtJoBVqKpcT"},{"type":"normal","id":"2xka3","time":205,"ts":"1584866883","postid":3742671,"posturl":"https:\/\/keepwalkingmusic.com\/lyrah-the-view\/","fav":0,"key":"602a5ddae34fe17d118c42c70dcd64c4","artist":"Lyrah","song":"The View","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:6OGNCy0auXwpa25uAIqmtM"},{"type":"normal","id":"2xckk","time":271,"ts":"1583221510","postid":3723814,"posturl":"http:\/\/www.soulbounce.com\/2020\/03\/marie-dahlstrom-releases-title-track-from-debut-album-like-sand\/","fav":0,"key":"8878028c87b1cfff911690756c30a514","artist":"Marie Dahlstrom","song":"Like Sand (Feat. Beau Diako)","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:2fWlUgX2Qa44ZQCT2rKF0U"},{"type":"normal","id":"2sdsn","time":229,"ts":"1582995924","postid":3721728,"posturl":"https:\/\/hi54.blog\/content\/highly-recommended-w\/-lewin","fav":0,"key":"6f42f8a8048d2996d5a15342ec9a82e6","artist":"Adrianne Lenker","song":"symbol","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:7f3xVpWfp3FPursBSrIEMJ"},{"type":"normal","id":"2xeg5","time":30,"ts":"1582993324","postid":3737441,"posturl":"http:\/\/www.thenewlofi.com\/2020\/03\/disclosure-have-released-a-new-album-ecstasy\/","fav":0,"key":"2e8db7b3fef8950b0fa86880ad9c4b48","artist":"Disclosure","song":"Tondo","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:23PIMIlFx1FeiCmmIf1RgZ"},{"type":"normal","id":"2wmnq","time":166,"ts":"1582919504","postid":3720454,"posturl":"https:\/\/www.theburningear.com\/ghstwrld-everything-feat-metaxas\/","fav":0,"key":"ae04e0fba10a10c8bdee515d012fae1d","artist":"GHSTWRLD","song":"Everything (feat Metaxas)","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:45hEz9nWuc8IgUEwY53l4k"},{"type":"normal","id":"2wk1t","time":162,"ts":"1582919000","postid":3719672,"posturl":"https:\/\/yamamiya.wordpress.com\/2020\/02\/26\/illuminatihotties\/","fav":0,"key":"70fa00fb5a53cebeae5c0cd8f08e3785","artist":"illuminati hotties","song":"ppl plzr","is_sc":true,"is_bc":true},{"type":"normal","id":"2xb19","time":213,"ts":"1582311790","postid":3720681,"posturl":"https:\/\/cruelrhythm.tumblr.com\/post\/611107622029000704","fav":0,"key":"b395454e0aab18472edcfa0aaf30e448","artist":"RAYOWA","song":"Chance","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:7uoiYmPfTK6SPOYFc8htal"},{"type":"normal","id":"2x0sc","time":253,"ts":"1582310214","postid":3717598,"posturl":"https:\/\/www.popmatters.com\/khruangbin-leon-bridges-texas-sun-2645207069.html","fav":0,"key":"6965ff9a9f48996d7254a1bd3e45432a","artist":"Khruangbin & Leon Bridges","song":"Texas Sun","is_sc":false,"is_bc":true,"spotify_uri":"spotify:track:3k5oLgungD1dSOGLqQdIQw"},{"type":"normal","id":"2xcvj","time":231,"ts":"1582272643","postid":3716604,"posturl":"http:\/\/houseoflords.xyz\/tom-misch-yussef-dayes-kinda-music\/","fav":0,"key":"9291db5c3ff9c9feb650007f6153497a","artist":"Tom Misch & Yussef Dayes","song":"What Kinda Music","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:4FQytrC7QjGy8mecYCnsuy"},{"type":"normal","id":"2wds6","time":263,"ts":"1579683409","postid":3699413,"posturl":"https:\/\/supportyourlocalghetto.tumblr.com\/post\/190340169834\/sunday-morning-earcandy-utopia-by-bremer","fav":0,"key":"6bfc8cbe09845502888d8c734a76f191","artist":"Bremer McCoy","song":"H\u00f8jder","is_sc":false,"is_bc":true},{"type":"normal","id":"2wze6","time":208,"ts":"1579509967","postid":3699584,"posturl":"https:\/\/atcostmag.tumblr.com\/post\/190353561513\/magdalena-bay-how-to-get-physical","fav":0,"key":"9bc5e9b1a5045085b5ab9c383f8d0362","artist":"MAGDALENA BAY","song":"Oh Hell","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:43HbqSsvOQ2CgLiB5OqPIF"},{"type":"normal","id":"2x52b","time":235,"ts":"1579251245","postid":3716482,"posturl":"https:\/\/sawdustandgin.com\/post\/190917303971\/poolside-amo-amo-around-the-sun","fav":0,"key":"a898c2a37909435f5249e8100cffafd6","artist":"Poolside","song":"Around The Sun (feat. Amo Amo)","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:0VrdF2Q4bSf5DWCnEPii0P"},{"type":"normal","id":"2x4sq","time":152,"ts":"1579251039","postid":3713197,"posturl":"https:\/\/www.theburningear.com\/stray-fossa-are-you-gonna-be-okay\/","fav":0,"key":"632e744714be39283e0cd23720d1bb95","artist":"Stray Fossa","song":"Are You Gonna Be Okay","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:5B5lxAW6Iz5E3dWWPs7mnC"},{"type":"normal","id":"2x4tn","time":190,"ts":"1579250560","postid":3732780,"posturl":"https:\/\/pitchfork.com\/reviews\/albums\/magdalena-bay-a-little-rhythm-and-a-wicked-feeling-ep\/","fav":0,"key":"d2a4586bb693d0e41a217595af563bdb","artist":"Magdalena Bay","song":"How to Get Physical","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:6N2ok8fE2SKI79rkLfMpE7"},{"type":"normal","id":"2vz0v","time":355,"ts":"1579249916","postid":3696501,"posturl":"http:\/\/silencenogood.net\/channel-tres\/","fav":0,"key":"ce6b9bdf446bcf8715d370667773edbb","artist":"Channel Tres","song":"Sexy Black Timberlake (SG Lewis Remix)","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:20E3uaKqO6R4iN2uB96TNc"},{"type":"normal","id":"2sghv","time":393,"ts":"1577683085","postid":3690395,"posturl":"http:\/\/concreteopinions.com\/31-days-of-good-12-27-19\/","fav":0,"key":"71ca36dbc8be5ce43935dbbb321d3dba","artist":"Tourist","song":"Apollo","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:5huPJYLNtpeeaGZN3gdAaf"},{"type":"normal","id":"2tnhf","time":602,"ts":"1576239385","postid":3684418,"posturl":"https:\/\/acloserlisten.com\/2019\/12\/11\/acl-2019-the-years-best-labels\/","fav":0,"key":"9b339d38aa29e1f489150d069cafcc81","artist":"Snow Palms","song":"Everything Ascending","is_sc":false,"is_bc":true,"spotify_uri":"spotify:track:4ERwsYrHID5aJItr1C9Lwd"},{"type":"normal","id":"2wq1r","time":327,"ts":"1573554391","postid":3683353,"posturl":"https:\/\/burlveneer-music.tumblr.com\/post\/189570456455\/andy-stott-versi-modernlove-taken-from-it","fav":0,"key":"0dba3114f21ac32daa2e47dde15b6a26","artist":"Andy Stott","song":"Versi","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:0BXzLyIdYDtG4Nv0ddyB93"},{"type":"normal","id":"2wmyb","time":236,"ts":"1573553609","postid":3702759,"posturl":"https:\/\/weallwantsomeone.org\/2020\/01\/24\/photos-magdalena-bay-at-elsewhere-zone-one-january-15-2020\/","fav":0,"key":"aad5eac0205779c6d33538acd9076c64","artist":"MAGDALENA BAY","song":"Killshot","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:0LJTfmgOMvlLd0u4HU9twm"},{"type":"normal","id":"2wj89","time":179,"ts":"1572534679","postid":3664256,"posturl":"https:\/\/acidstag.com\/2019\/11\/sunday-chills-202\/","fav":0,"key":"a65311ed4959942878f3dbf2437a2d72","artist":"Calper x Son of Cabe","song":"Crowd","is_sc":true,"is_bc":false},{"type":"normal","id":"2v3a5","time":217,"ts":"1571416571","postid":3655323,"posturl":"https:\/\/eartapas.tumblr.com\/post\/188414244443\/right-off-the-bat-this-track-cuts-to-the-chase","fav":0,"key":"54acdb581f0a30fc31190ac1d88aa05a","artist":"Saeyers","song":"You","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:04PNoyAVLyO4x5NpBZafB4"},{"type":"normal","id":"2wfgv","time":221,"ts":"1571151977","postid":3687183,"posturl":"https:\/\/whenthehornblows.com\/content\/2019\/12\/16\/track-by-track-nature-tv-emotion-sickness-ep","fav":0,"key":"ed9640409f82d355bfa31cec4e462594","artist":"Nature TV","song":"She Wants To See You Cry","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:3REso3eKtF8pGZWlFOuxre"},{"type":"normal","id":"2wgnh","time":336,"ts":"1571123502","postid":3652761,"posturl":"https:\/\/www.faetonmusic.com\/2019\/10\/tomas-novoa-cienaga-2019\/","fav":0,"key":"94ccf552b9cfa46fcbc8850ec4929439","artist":"Tomas Novoa","song":"Ci\u00e9naga","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:1TCnbwslRkzG7kqgx2Kaj3"},{"type":"normal","id":"2we5k","time":281,"ts":"1570553313","postid":3649252,"posturl":"https:\/\/groovilant.com\/the-weekly-surprise-003\/","fav":0,"key":"98565080c337df6144a7b8f8b5000b00","artist":"Flume","song":"Let You Know feat. London Grammar (Robin...","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:6ZkVGDZSgoGSvBA4LUzzaW"},{"type":"normal","id":"2wcnk","time":305,"ts":"1570466269","postid":3648757,"posturl":"https:\/\/levisiteuronline.com\/music\/calcou-zeitgeist-feat-bastien-2\/","fav":0,"key":"be8149134e31220293bd05130e1beb72","artist":"Calcou","song":"Zeitgeist (feat. Bastien)","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:7gaIkyQxjefa0D7JruFMOz"},{"type":"normal","id":"2vbtb","time":165,"ts":"1570363436","postid":3647433,"posturl":"https:\/\/acidstag.com\/2019\/10\/btm-rob-carroll-of-good-intent\/","fav":0,"key":"0062bbdc20d24501572b2c0bba1e71c0","artist":"AKA Lui","song":"Hey! I Don't Want That Anyway","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:2Orge4IMIiIgvOQfNg33WA"},{"type":"normal","id":"2watz","time":228,"ts":"1569478568","postid":3657972,"posturl":"https:\/\/acidstag.com\/2019\/10\/lets-hear-it-for-thegirls-v117\/","fav":0,"key":"2d6eca9c67f5c00c7a557c8d29fb1334","artist":"MONOGEM","song":"Soy Lo Que Soy","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:2NooozzLR6L6IjLGdCOEqh"},{"type":"normal","id":"2w8sh","time":286,"ts":"1569396323","postid":3686548,"posturl":"https:\/\/www.recordturnover.com\/2019\/12\/14\/blue-material\/","fav":0,"key":"b7cd063602cee7f931c7378e378857ba","artist":"Blue Material","song":"Personal","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:08FefK6TTh7nYc8Msz3QAe"},{"type":"normal","id":"2sw1d","time":309,"ts":"1567751344","postid":3629318,"posturl":"http:\/\/www.deadhorsemarch.com\/jesse-jo-stark-lady-bird\/","fav":0,"key":"7455d5293d96e04b900428e6dae5a8f5","artist":"Jesse Jo Stark Music","song":"Mystery","is_sc":true,"is_bc":false},{"type":"normal","id":"2vy14","time":207,"ts":"1567424797","postid":3627622,"posturl":"https:\/\/www.theburningear.com\/ora-the-molecule-sale\/","fav":0,"key":"789a776a447b108482913e191c4f8e36","artist":"Ora The Molecule","song":"Sale\u0301","is_sc":true,"is_bc":false},{"type":"normal","id":"2tw99","time":196,"ts":"1567338158","postid":3714910,"posturl":"https:\/\/tapedeckpodcast.com\/spectreview-sault-5-7\/","fav":0,"key":"e15789c2448a786ea84285998ea76b26","artist":"SAULT","song":"Don't Waste My Time","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:70tAM9TN7ryjB0gPGOjS7l"},{"type":"normal","id":"2w11p","time":114,"ts":"1567337361","postid":3652534,"posturl":"http:\/\/www.thenewlofi.com\/2019\/10\/adventures-on-the-floating-island-ted-feighan-releases-his-new-album-as-a-mango-colored-pinwheel-vinyl\/","fav":0,"key":"11c1ec27e75e742f26c563be67359108","artist":"Monster Rally","song":"Sister Owls","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:7wXrfLkVdRtqdFHlM8zBoa"},{"type":"normal","id":"2w46z","time":185,"ts":"1567336951","postid":3715929,"posturl":"http:\/\/post-trash.com\/news\/2020\/2\/19\/ghost-funk-orchestra-a-song-for-paul-album-review","fav":0,"key":"da4563c2867ae026322aa1c51f33d98a","artist":"Ghost Funk Orchestra","song":"Walk Like A Motherfucker","is_sc":false,"is_bc":true,"spotify_uri":"spotify:track:7zlotF0dxQZQILImy7jXbw"},{"type":"normal","id":"2vyxt","time":287,"ts":"1567336949","postid":3689743,"posturl":"https:\/\/stadiumsandshrines.com\/e73-nina-keith\/","fav":0,"key":"ad3375696b7e5a61ff22b5a228e8601a","artist":"Nina Keith","song":"In The Woods We Both Saw It, Weren't Dre...","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:1WuwWlJuXMFbJTay3wS9Ow"},{"type":"normal","id":"2w46e","time":168,"ts":"1567336158","postid":3731958,"posturl":"https:\/\/buzzbands.la\/2020\/03\/18\/ears-wide-open-michi\/","fav":0,"key":"586f0ecb102bec5874f0d211ee5b8a80","artist":"Michi","song":"Still Feel U","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:5SyqNu9Ds3fy5Cl6yrAb0v"},{"type":"normal","id":"2w4m9","time":220,"ts":"1566975508","postid":3624372,"posturl":"https:\/\/acidstag.com\/2019\/08\/cabu-signs-feat-vanessa-elisha\/","fav":0,"key":"a4f91e394ab624559c4cf4217c43341f","artist":"Cabu","song":"Signs (Feat. Vanessa Elisha)","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:04698nAWskvusZz79n3AUy"},{"type":"normal","id":"2vpvs","time":261,"ts":"1566975098","postid":3644483,"posturl":"https:\/\/atcostmag.tumblr.com\/post\/188024814978\/monogem-soy-lo-que-soy","fav":0,"key":"41dae0be2f121784d54f6e5809ff4b8a","artist":"MONOGEM","song":"So Many Ways","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:1E4xmOlJ26yZvvjs8KNlYL"},{"type":"normal","id":"2w2vz","time":238,"ts":"1566457212","postid":3624720,"posturl":"http:\/\/musicyouwannalistento.blogspot.com\/2019\/08\/friends.html","fav":0,"key":"48ce1ee5c197e88e683c4be2eb5bac7c","artist":"Big Gigantic","song":"Friends (feat. Ashe)","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:67J01Vb3WHz7QuuBriVdJQ"},{"type":"normal","id":"2w2mt","time":359,"ts":"1566457017","postid":3621188,"posturl":"http:\/\/houseoflords.xyz\/admin-adjust-love\/","fav":0,"key":"86cc626c546e73166e4dbd266b6665d2","artist":"Admin","song":"Adjust Your Love","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:5OtBpL60yVz5WryHIyr1sf"},{"type":"normal","id":"2w292","time":196,"ts":"1566456016","postid":3629879,"posturl":"https:\/\/atcostmag.tumblr.com\/post\/187496741108\/magdalena-bay-venice","fav":0,"key":"a1026f6d57b3d1977d401e1d62e8367b","artist":"MAGDALENA BAY","song":"Venice","is_sc":true,"is_bc":true,"spotify_uri":"spotify:track:0UsgQElSurvhKAuosIcIT1"},{"type":"normal","id":"2vwyx","time":228,"ts":"1565765657","postid":3683160,"posturl":"https:\/\/yamamiya.wordpress.com\/2019\/12\/09\/munya-2\/","fav":0,"key":"77a53eaf8ff5379667ebb70b50ffbaba","artist":"MUNYA","song":"Dove","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:5ZkfSkIA4Z9hUjVGZQVbP0"},{"type":"normal","id":"2e03w","time":213,"ts":"1565161069","postid":3613238,"posturl":"http:\/\/silencenogood.net\/khruangbin-sex-on-stage\/","fav":0,"key":"7e43e0791cf60b9cc6671f4760a220a2","artist":"Khruangbin","song":"Two Fish and an Elephant","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:2kGMBOPXMtb9gxzVYdplg9"},{"type":"normal","id":"2vqq9","time":346,"ts":"1562601417","postid":3597363,"posturl":"https:\/\/acidstag.com\/2019\/07\/remix-this-186\/","fav":0,"key":"0dca340686fae07aebc494230ff164eb","artist":"Bell Biv Devoe","song":"Poison (Lisbona Sisters & Justin Jay's N...","is_sc":true,"is_bc":false},{"type":"normal","id":"2vprw","time":175,"ts":"1561973729","postid":3593457,"posturl":"https:\/\/dimestoresaints.blog\/2019\/06\/28\/grebes-house-creature\/","fav":0,"key":"61ac6bbba104c67388b257d28cc75f95","artist":"Grebes","song":"wyd","is_sc":false,"is_bc":true,"spotify_uri":"spotify:track:2Ev3tTpZzvpqW8pbj3nDlR"},{"type":"normal","id":"2vp6f","time":172,"ts":"1561972202","postid":3594611,"posturl":"https:\/\/www.stereofox.com\/kalaido-motorbikes-in-sapa\/","fav":0,"key":"937c1ec3515b191b941966d755ceabc9","artist":"Kalaido","song":"Motorbikes In Sapa","is_sc":true,"is_bc":false,"spotify_uri":"spotify:track:4bhRjJyGSpVzNF8A1t46aP"}],"page_name":"profile","page_mode":"loved","page_arg":"napcae","page_sort":"","title":"napcae's favorite tracks \/ Hype Machine","page_next":"\/napcae\/2"}    </script>


<script>
    enable_notification_check();
    </script>

    </div><!-- content -->
    </div><!-- container -->

    
    <!-- PAGE TOTAL: 0.196s -->

</div><!-- end content wrapper -->


<div id="footer-menu">

    <div id="footer-menu-inner" class="content-centered">

        <ul class="menu">
            <li><a href="/about">About</a></li>
            <li><a class="user" href="/contact">Contact</a></li>
                        <li><a target="_blank" href="http://blog.hypem.com">Our Blog</a></li>
            <li><a target="_blank" class="hide_mobile" href="http://merch.hypem.com/">Merch</a></li>
            <li><a href="/stack" class="hide_mobile">Stack: Weekly Mix</a></li>
            <li><a target="_blank" class="hide_mobile" href="/premiere" title="Featured album premieres">Featured Albums</a></li>
                    </ul>

    </div>

</div>

<div id="footer">

    <div id="footer-inner" class="content-centered">

        <p>
                Since 2005, Hype Machine is made in Brooklyn, NY<span class="hide_mobile"> by <a href="https://hypem.com/anthony" title="Anthony Volodkin">Anthony</a>, <a href="https://hypem.com/zoya" title="Zoya Feldman">Zoya</a>, <a href="https://hypem.com/scott" title="Scott Kidder">Scott</a> &amp; <a href="https://hypem.com/stadiumsshrines" title="Dave Sutton">Dave</a></span> and is funded by listeners like you. <a href="https://hypem.com/support-us">Support us here</a>.
        
        
        <br />
        <a href="/terms">Terms of Use</a> &bull; <a href="/privacy">Privacy Policy</a>

                <span class="hide_mobile">
                &bull; Advertising by <a href="http://hear-there.com/">Hear &amp; There</a>. <a href="http://hear-there.com/#contact" target="_blank">Advertise</a><br />
                </span>
        
        
        
	</div>
</div>



<div id="toast-prompt">
    <h5>Want to be notified when the track changes?</h5>
    <p>Click <strong>Allow</strong> to get desktop notifications when Hype Machine is in the background.</p>
</div>


    
        
    
            <script>
            var _qevents = _qevents || [];
            (function() {
                var elem = document.createElement('script');
                elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js";
                elem.async = true;
                elem.type = "text/javascript";
                var scpt = document.getElementsByTagName('script')[0];
                scpt.parentNode.insertBefore(elem, scpt);
            })();
        </script>
    
    
        <script>
            var _gaq = _gaq || [];
            _gaq.push(['_setAccount', 'UA-97430-1']);

            (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
            })();

            _gaq.push(['_addIgnoredOrganic', 'hypem']); 
            _gaq.push(['_addIgnoredOrganic', 'hype machine']); 
            _gaq.push(['_addIgnoredOrganic', 'hypemachine']); 
            _gaq.push(['_addIgnoredOrganic', 'hypem.com']); 
            _gaq.push(['_addIgnoredOrganic', 'the hype machine']); 
            _gaq.push(['_addIgnoredOrganic', 'http://hypem.com/']); 
            _gaq.push(['_addIgnoredOrganic', 'hype m']); 
            _gaq.push(['_addIgnoredOrganic', 'www.hypem.com']);
            _gaq.push(['_addIgnoredOrganic', 'http://hypem.com/popular']);

        </script>

   
    <script src="https://static.hypem.com/rev_1493874591/js/libs/swfobject.js"></script>
    
    <div id="keyboard">
    <div class="overlay"></div>
    <div class="popup">
        <div id="close-keyboard-shortcuts"></div>
        <h1>Keyboard Shortcuts</h1>
        <div class="function">
            Show / Hide this menu
        </div>
        <div class="keys">
            <span>?</span>
        </div>
        <div class="function">
            Next Track
        </div>
        <div class="keys">
            <span>n</span>
            <span>j</span>
            <span>b</span>
            <span>→</span>
        </div>
        <div class="function">
            Previous Track
        </div>
        <div class="keys">
            <span>p</span>
            <span>k</span>
            <span>z</span>
            <span>←</span>
        </div>
        <div class="function">
            Play / Pause
        </div>
        <div class="keys">
            <span>space</span>
            <span>x</span>
            <span>c</span>
        </div>
        <div class="function">
            Stop
        </div>
        <div class="keys">
            <span>v</span>
        </div>
        <div class="function">
            Heart
        </div>
        <div class="keys">
            <span>l</span>
            <span>h</span>
            <span>f</span>
        </div>
        <div class="function">
            Focus Search Bar
        </div>
        <div class="keys">
            <span>/</span>
        </div>
        <div class="function">
            Volume Up / Down
        </div>
        <div class="keys">
            <span>+</span>
            <span>-</span>
        </div>
        <div class="function">
            Close Popups
        </div>
        <div class="keys">
            <span>esc</span>
        </div>
    </div>
</div>

            <!-- Quantcast Choice. Consent Manager Tag -->
        <script type="text/javascript" async=true>
            var elem = document.createElement('script');
            elem.src = 'https://quantcast.mgr.consensu.org/cmp.js';
            elem.async = true;
            elem.type = "text/javascript";
            var scpt = document.getElementsByTagName('script')[0];
            scpt.parentNode.insertBefore(elem, scpt);
            (function() {
            var gdprAppliesGlobally = true;
            function addFrame() {
                if (!window.frames['__cmpLocator']) {
                if (document.body) {
                    var body = document.body,
                        iframe = document.createElement('iframe');
                    iframe.style = 'display:none';
                    iframe.name = '__cmpLocator';
                    body.appendChild(iframe);
                } else {
                    // In the case where this stub is located in the head,
                    // this allows us to inject the iframe more quickly than
                    // relying on DOMContentLoaded or other events.
                    setTimeout(addFrame, 5);
                }
                }
            }
            addFrame();
            function cmpMsgHandler(event) {
                var msgIsString = typeof event.data === "string";
                var json;
                if(msgIsString) {
                json = event.data.indexOf("__cmpCall") != -1 ? JSON.parse(event.data) : {};
                } else {
                json = event.data;
                }
                if (json.__cmpCall) {
                var i = json.__cmpCall;
                window.__cmp(i.command, i.parameter, function(retValue, success) {
                    var returnMsg = {"__cmpReturn": {
                    "returnValue": retValue,
                    "success": success,
                    "callId": i.callId
                    }};
                    event.source.postMessage(msgIsString ?
                    JSON.stringify(returnMsg) : returnMsg, '*');
                });
                }
            }
            window.__cmp = function (c) {
                var b = arguments;
                if (!b.length) {
                return __cmp.a;
                }
                else if (b[0] === 'ping') {
                b[2]({"gdprAppliesGlobally": gdprAppliesGlobally,
                    "cmpLoaded": false}, true);
                } else if (c == '__cmp')
                return false;
                else {
                if (typeof __cmp.a === 'undefined') {
                    __cmp.a = [];
                }
                __cmp.a.push([].slice.apply(b));
                }
            }
            window.__cmp.gdprAppliesGlobally = gdprAppliesGlobally;
            window.__cmp.msgHandler = cmpMsgHandler;
            if (window.addEventListener) {
                window.addEventListener('message', cmpMsgHandler, false);
            }
            else {
                window.attachEvent('onmessage', cmpMsgHandler);
            }
            })();
            window.__cmp('init', {
                'Language': 'en',
                'Initial Screen Title Text': 'New Privacy Rules',
                'Initial Screen Reject Button Text': 'I do not accept',
                'Initial Screen Accept Button Text': 'I accept',
                'Purpose Screen Header Title Text': 'Privacy settings',
                'Purpose Screen Body Text': 'Here\'s how your data is used on Hype Machine. Read more about this in our <a style="color:#fff;text-decoration:underline;" target="_blank" href="https://hypem.com/privacy">Privacy Policy</a>.<br/><br/>Below, you can set your consent preferences and determine how you want your data to be used by our partners.',
                'Vendor Screen Body Text': 'You can set consent preferences for each individual third-party company below. Expand each company list item to see what purposes they use data for to help make your choices. In some cases, companies may disclose that they use your data without asking for your consent, based on their legitimate interests. You can click on their privacy policies for more information and to opt out.',
                'Vendor Screen Accept All Button Text': 'Accept all',
                'Vendor Screen Reject All Button Text': 'Reject all',
                'Initial Screen Body Text': 'We and our partners process your personal data using technology such as cookies in order to serve advertising, analyze our traffic and deliver customized experiences for you. You have choice in who uses your data and for what purposes and after setting your preferences may come back anytime to make changes.',
                'Initial Screen Body Text Option': 1,
                'Publisher Name': 'The Hype Machine, Inc',
                'Publisher Purpose IDs': [1,2,5],
                'Publisher Purpose Legitimate Interest IDs': [1,2,5],
                'Consent Scope': 'service',
                'UI Layout': 'banner',
                'No Option': false
            });
        </script>
        <!-- End Quantcast Choice. Consent Manager Tag -->
        
</body>

</html>

    http_version: null
  recorded_at: Thu, 09 Apr 2020 17:34:56 GMT
recorded_with: VCR 5.1.0
